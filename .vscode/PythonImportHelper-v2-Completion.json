[
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "Popen",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "PIPE",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "Pool",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "socket,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket.",
        "description": "socket.",
        "detail": "socket.",
        "documentation": {}
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "select,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "select.",
        "description": "select.",
        "detail": "select.",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "ADS1115",
        "importPath": "DFRobot_ADS1115",
        "description": "DFRobot_ADS1115",
        "isExtraImport": true,
        "detail": "DFRobot_ADS1115",
        "documentation": {}
    },
    {
        "label": "ADS1115",
        "importPath": "DFRobot_ADS1115",
        "description": "DFRobot_ADS1115",
        "isExtraImport": true,
        "detail": "DFRobot_ADS1115",
        "documentation": {}
    },
    {
        "label": "ADS1115",
        "importPath": "DFRobot_ADS1115",
        "description": "DFRobot_ADS1115",
        "isExtraImport": true,
        "detail": "DFRobot_ADS1115",
        "documentation": {}
    },
    {
        "label": "ADS1115",
        "importPath": "DFRobot_ADS1115",
        "description": "DFRobot_ADS1115",
        "isExtraImport": true,
        "detail": "DFRobot_ADS1115",
        "documentation": {}
    },
    {
        "label": "DFRobot_EC",
        "importPath": "DFRobot_EC     ",
        "description": "DFRobot_EC     ",
        "isExtraImport": true,
        "detail": "DFRobot_EC     ",
        "documentation": {}
    },
    {
        "label": "DFRobot_EC",
        "importPath": "DFRobot_EC     ",
        "description": "DFRobot_EC     ",
        "isExtraImport": true,
        "detail": "DFRobot_EC     ",
        "documentation": {}
    },
    {
        "label": "DFRobot_EC",
        "importPath": "DFRobot_EC",
        "description": "DFRobot_EC",
        "isExtraImport": true,
        "detail": "DFRobot_EC",
        "documentation": {}
    },
    {
        "label": "DFRobot_PH",
        "importPath": "DFRobot_PH     ",
        "description": "DFRobot_PH     ",
        "isExtraImport": true,
        "detail": "DFRobot_PH     ",
        "documentation": {}
    },
    {
        "label": "DFRobot_PH",
        "importPath": "DFRobot_PH     ",
        "description": "DFRobot_PH     ",
        "isExtraImport": true,
        "detail": "DFRobot_PH     ",
        "documentation": {}
    },
    {
        "label": "DFRobot_PH",
        "importPath": "DFRobot_PH     ",
        "description": "DFRobot_PH     ",
        "isExtraImport": true,
        "detail": "DFRobot_PH     ",
        "documentation": {}
    },
    {
        "label": "DFRobot_PH",
        "importPath": "DFRobot_PH",
        "description": "DFRobot_PH",
        "isExtraImport": true,
        "detail": "DFRobot_PH",
        "documentation": {}
    },
    {
        "label": "smbus",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "smbus",
        "description": "smbus",
        "detail": "smbus",
        "documentation": {}
    },
    {
        "label": "codecs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "codecs",
        "description": "codecs",
        "detail": "codecs",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "getopt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "getopt",
        "description": "getopt",
        "detail": "getopt",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "sre_compile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sre_compile",
        "description": "sre_compile",
        "detail": "sre_compile",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "unicodedata",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unicodedata",
        "description": "unicodedata",
        "detail": "unicodedata",
        "documentation": {}
    },
    {
        "label": "sysconfig",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sysconfig",
        "description": "sysconfig",
        "detail": "sysconfig",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "Glyph",
        "kind": 6,
        "importPath": "libraries.Adafruit-GFX-Library-master.fontconvert.bdf2adafruit",
        "description": "libraries.Adafruit-GFX-Library-master.fontconvert.bdf2adafruit",
        "peekOfCode": "class Glyph:\n    encoding = -1\n    rows = []\n    comment = \"\"\n    offset = -1\n    width = 0\n    height = 0\n    advance = 0\n    xoffs = 0\n    yoffs = 0",
        "detail": "libraries.Adafruit-GFX-Library-master.fontconvert.bdf2adafruit",
        "documentation": {}
    },
    {
        "label": "myfile",
        "kind": 5,
        "importPath": "libraries.Adafruit-GFX-Library-master.fontconvert.bdf2adafruit",
        "description": "libraries.Adafruit-GFX-Library-master.fontconvert.bdf2adafruit",
        "peekOfCode": "myfile = open(sys.argv[1])\nprocessing = 0\ngetting_rows = 0\nchars = []\nbitmapData = []\nclass Glyph:\n    encoding = -1\n    rows = []\n    comment = \"\"\n    offset = -1",
        "detail": "libraries.Adafruit-GFX-Library-master.fontconvert.bdf2adafruit",
        "documentation": {}
    },
    {
        "label": "processing",
        "kind": 5,
        "importPath": "libraries.Adafruit-GFX-Library-master.fontconvert.bdf2adafruit",
        "description": "libraries.Adafruit-GFX-Library-master.fontconvert.bdf2adafruit",
        "peekOfCode": "processing = 0\ngetting_rows = 0\nchars = []\nbitmapData = []\nclass Glyph:\n    encoding = -1\n    rows = []\n    comment = \"\"\n    offset = -1\n    width = 0",
        "detail": "libraries.Adafruit-GFX-Library-master.fontconvert.bdf2adafruit",
        "documentation": {}
    },
    {
        "label": "getting_rows",
        "kind": 5,
        "importPath": "libraries.Adafruit-GFX-Library-master.fontconvert.bdf2adafruit",
        "description": "libraries.Adafruit-GFX-Library-master.fontconvert.bdf2adafruit",
        "peekOfCode": "getting_rows = 0\nchars = []\nbitmapData = []\nclass Glyph:\n    encoding = -1\n    rows = []\n    comment = \"\"\n    offset = -1\n    width = 0\n    height = 0",
        "detail": "libraries.Adafruit-GFX-Library-master.fontconvert.bdf2adafruit",
        "documentation": {}
    },
    {
        "label": "chars",
        "kind": 5,
        "importPath": "libraries.Adafruit-GFX-Library-master.fontconvert.bdf2adafruit",
        "description": "libraries.Adafruit-GFX-Library-master.fontconvert.bdf2adafruit",
        "peekOfCode": "chars = []\nbitmapData = []\nclass Glyph:\n    encoding = -1\n    rows = []\n    comment = \"\"\n    offset = -1\n    width = 0\n    height = 0\n    advance = 0",
        "detail": "libraries.Adafruit-GFX-Library-master.fontconvert.bdf2adafruit",
        "documentation": {}
    },
    {
        "label": "bitmapData",
        "kind": 5,
        "importPath": "libraries.Adafruit-GFX-Library-master.fontconvert.bdf2adafruit",
        "description": "libraries.Adafruit-GFX-Library-master.fontconvert.bdf2adafruit",
        "peekOfCode": "bitmapData = []\nclass Glyph:\n    encoding = -1\n    rows = []\n    comment = \"\"\n    offset = -1\n    width = 0\n    height = 0\n    advance = 0\n    xoffs = 0",
        "detail": "libraries.Adafruit-GFX-Library-master.fontconvert.bdf2adafruit",
        "documentation": {}
    },
    {
        "label": "build_sketch",
        "kind": 2,
        "importPath": "libraries.Adafruit_SPIFlash.tools.build_all",
        "description": "libraries.Adafruit_SPIFlash.tools.build_all",
        "peekOfCode": "def build_sketch(variant, sketch):\n    ret = [0, 0, 0]\n    name = variant[0]\n    fqbn = variant[1]\n    start_time = time.monotonic()\n    # Skip if contains: \".board.test.skip\" or \".all.test.skip\"\n    # Skip if not contains: \".board.test.only\" for a specific board\n    sketchdir = os.path.dirname(sketch)\n    if os.path.exists(sketchdir + '/.all.test.skip') or os.path.exists(sketchdir + '/.' + name + '.test.skip') or \\\n            (glob.glob(sketchdir + \"/.*.test.only\") and not os.path.exists(sketchdir + '/.' + name + '.test.only')):",
        "detail": "libraries.Adafruit_SPIFlash.tools.build_all",
        "documentation": {}
    },
    {
        "label": "build_variant",
        "kind": 2,
        "importPath": "libraries.Adafruit_SPIFlash.tools.build_all",
        "description": "libraries.Adafruit_SPIFlash.tools.build_all",
        "peekOfCode": "def build_variant(variant):\n    print()\n    print(build_separator)\n    print('| {:^56} |'.format('Board ' + variant[0]))\n    print(build_separator)\n    print(build_format.format('Example', '\\033[39mResult\\033[0m', 'Time'))\n    print(build_separator)\n    with Pool(processes=os.cpu_count()) as pool:\n        pool_args = list((map(lambda e, v=variant: [v, e], all_examples)))\n        result = pool.starmap(build_sketch, pool_args)",
        "detail": "libraries.Adafruit_SPIFlash.tools.build_all",
        "documentation": {}
    },
    {
        "label": "SUCCEEDED",
        "kind": 5,
        "importPath": "libraries.Adafruit_SPIFlash.tools.build_all",
        "description": "libraries.Adafruit_SPIFlash.tools.build_all",
        "peekOfCode": "SUCCEEDED = \"\\033[32msucceeded\\033[0m\"\nFAILED = \"\\033[31mfailed\\033[0m\"\nSKIPPED = \"\\033[35mskipped\\033[0m\"\nWARNING = \"\\033[33mwarnings\\033[0m \"\nbuild_format = '| {:35} | {:9} | {:6} |'\nbuild_separator = '-' * 59\n# ci-arduino naming, fqbn\nall_boards = [\n    #['metro_m0_tinyusb', 'adafruit:samd:adafruit_metro_m0:usbstack=tinyusb'],\n    #['metro_m4_tinyusb', 'adafruit:samd:adafruit_metro_m4:speed=120,usbstack=tinyusb'],",
        "detail": "libraries.Adafruit_SPIFlash.tools.build_all",
        "documentation": {}
    },
    {
        "label": "FAILED",
        "kind": 5,
        "importPath": "libraries.Adafruit_SPIFlash.tools.build_all",
        "description": "libraries.Adafruit_SPIFlash.tools.build_all",
        "peekOfCode": "FAILED = \"\\033[31mfailed\\033[0m\"\nSKIPPED = \"\\033[35mskipped\\033[0m\"\nWARNING = \"\\033[33mwarnings\\033[0m \"\nbuild_format = '| {:35} | {:9} | {:6} |'\nbuild_separator = '-' * 59\n# ci-arduino naming, fqbn\nall_boards = [\n    #['metro_m0_tinyusb', 'adafruit:samd:adafruit_metro_m0:usbstack=tinyusb'],\n    #['metro_m4_tinyusb', 'adafruit:samd:adafruit_metro_m4:speed=120,usbstack=tinyusb'],\n    ['nrf52840', 'adafruit:nrf52:feather52840'],",
        "detail": "libraries.Adafruit_SPIFlash.tools.build_all",
        "documentation": {}
    },
    {
        "label": "SKIPPED",
        "kind": 5,
        "importPath": "libraries.Adafruit_SPIFlash.tools.build_all",
        "description": "libraries.Adafruit_SPIFlash.tools.build_all",
        "peekOfCode": "SKIPPED = \"\\033[35mskipped\\033[0m\"\nWARNING = \"\\033[33mwarnings\\033[0m \"\nbuild_format = '| {:35} | {:9} | {:6} |'\nbuild_separator = '-' * 59\n# ci-arduino naming, fqbn\nall_boards = [\n    #['metro_m0_tinyusb', 'adafruit:samd:adafruit_metro_m0:usbstack=tinyusb'],\n    #['metro_m4_tinyusb', 'adafruit:samd:adafruit_metro_m4:speed=120,usbstack=tinyusb'],\n    ['nrf52840', 'adafruit:nrf52:feather52840'],\n    #['feather_rp2040_tinyusb', 'rp2040:rp2040:adafruit_feather:flash=8388608_0,freq=125,dbgport=Disabled,dbglvl=None,usbstack=tinyusb'],",
        "detail": "libraries.Adafruit_SPIFlash.tools.build_all",
        "documentation": {}
    },
    {
        "label": "WARNING",
        "kind": 5,
        "importPath": "libraries.Adafruit_SPIFlash.tools.build_all",
        "description": "libraries.Adafruit_SPIFlash.tools.build_all",
        "peekOfCode": "WARNING = \"\\033[33mwarnings\\033[0m \"\nbuild_format = '| {:35} | {:9} | {:6} |'\nbuild_separator = '-' * 59\n# ci-arduino naming, fqbn\nall_boards = [\n    #['metro_m0_tinyusb', 'adafruit:samd:adafruit_metro_m0:usbstack=tinyusb'],\n    #['metro_m4_tinyusb', 'adafruit:samd:adafruit_metro_m4:speed=120,usbstack=tinyusb'],\n    ['nrf52840', 'adafruit:nrf52:feather52840'],\n    #['feather_rp2040_tinyusb', 'rp2040:rp2040:adafruit_feather:flash=8388608_0,freq=125,dbgport=Disabled,dbglvl=None,usbstack=tinyusb'],\n    #['metroesp32s2', 'esp32:esp32:adafruit_metro_esp32s2:CDCOnBoot=cdc,MSCOnBoot=default,DFUOnBoot=default,UploadMode=cdc,PSRAM=enabled,PartitionScheme=tinyuf2'],",
        "detail": "libraries.Adafruit_SPIFlash.tools.build_all",
        "documentation": {}
    },
    {
        "label": "build_format",
        "kind": 5,
        "importPath": "libraries.Adafruit_SPIFlash.tools.build_all",
        "description": "libraries.Adafruit_SPIFlash.tools.build_all",
        "peekOfCode": "build_format = '| {:35} | {:9} | {:6} |'\nbuild_separator = '-' * 59\n# ci-arduino naming, fqbn\nall_boards = [\n    #['metro_m0_tinyusb', 'adafruit:samd:adafruit_metro_m0:usbstack=tinyusb'],\n    #['metro_m4_tinyusb', 'adafruit:samd:adafruit_metro_m4:speed=120,usbstack=tinyusb'],\n    ['nrf52840', 'adafruit:nrf52:feather52840'],\n    #['feather_rp2040_tinyusb', 'rp2040:rp2040:adafruit_feather:flash=8388608_0,freq=125,dbgport=Disabled,dbglvl=None,usbstack=tinyusb'],\n    #['metroesp32s2', 'esp32:esp32:adafruit_metro_esp32s2:CDCOnBoot=cdc,MSCOnBoot=default,DFUOnBoot=default,UploadMode=cdc,PSRAM=enabled,PartitionScheme=tinyuf2'],\n    #[' ', 'esp32:esp32:adafruit_feather_esp32s3:FlashMode=qio,LoopCore=1,EventsCore=1,USBMode=default,CDCOnBoot=cdc,MSCOnBoot=default,DFUOnBoot=default,UploadMode=cdc,PartitionScheme=tinyuf2'],",
        "detail": "libraries.Adafruit_SPIFlash.tools.build_all",
        "documentation": {}
    },
    {
        "label": "build_separator",
        "kind": 5,
        "importPath": "libraries.Adafruit_SPIFlash.tools.build_all",
        "description": "libraries.Adafruit_SPIFlash.tools.build_all",
        "peekOfCode": "build_separator = '-' * 59\n# ci-arduino naming, fqbn\nall_boards = [\n    #['metro_m0_tinyusb', 'adafruit:samd:adafruit_metro_m0:usbstack=tinyusb'],\n    #['metro_m4_tinyusb', 'adafruit:samd:adafruit_metro_m4:speed=120,usbstack=tinyusb'],\n    ['nrf52840', 'adafruit:nrf52:feather52840'],\n    #['feather_rp2040_tinyusb', 'rp2040:rp2040:adafruit_feather:flash=8388608_0,freq=125,dbgport=Disabled,dbglvl=None,usbstack=tinyusb'],\n    #['metroesp32s2', 'esp32:esp32:adafruit_metro_esp32s2:CDCOnBoot=cdc,MSCOnBoot=default,DFUOnBoot=default,UploadMode=cdc,PSRAM=enabled,PartitionScheme=tinyuf2'],\n    #[' ', 'esp32:esp32:adafruit_feather_esp32s3:FlashMode=qio,LoopCore=1,EventsCore=1,USBMode=default,CDCOnBoot=cdc,MSCOnBoot=default,DFUOnBoot=default,UploadMode=cdc,PartitionScheme=tinyuf2'],\n]",
        "detail": "libraries.Adafruit_SPIFlash.tools.build_all",
        "documentation": {}
    },
    {
        "label": "all_boards",
        "kind": 5,
        "importPath": "libraries.Adafruit_SPIFlash.tools.build_all",
        "description": "libraries.Adafruit_SPIFlash.tools.build_all",
        "peekOfCode": "all_boards = [\n    #['metro_m0_tinyusb', 'adafruit:samd:adafruit_metro_m0:usbstack=tinyusb'],\n    #['metro_m4_tinyusb', 'adafruit:samd:adafruit_metro_m4:speed=120,usbstack=tinyusb'],\n    ['nrf52840', 'adafruit:nrf52:feather52840'],\n    #['feather_rp2040_tinyusb', 'rp2040:rp2040:adafruit_feather:flash=8388608_0,freq=125,dbgport=Disabled,dbglvl=None,usbstack=tinyusb'],\n    #['metroesp32s2', 'esp32:esp32:adafruit_metro_esp32s2:CDCOnBoot=cdc,MSCOnBoot=default,DFUOnBoot=default,UploadMode=cdc,PSRAM=enabled,PartitionScheme=tinyuf2'],\n    #[' ', 'esp32:esp32:adafruit_feather_esp32s3:FlashMode=qio,LoopCore=1,EventsCore=1,USBMode=default,CDCOnBoot=cdc,MSCOnBoot=default,DFUOnBoot=default,UploadMode=cdc,PartitionScheme=tinyuf2'],\n]\n# return [succeeded, failed, skipped]\ndef build_sketch(variant, sketch):",
        "detail": "libraries.Adafruit_SPIFlash.tools.build_all",
        "documentation": {}
    },
    {
        "label": "new_file",
        "kind": 5,
        "importPath": "libraries.Adafruit_SPIFlash.tools.update_flash_config",
        "description": "libraries.Adafruit_SPIFlash.tools.update_flash_config",
        "peekOfCode": "new_file = 'tools/flash_config.h'\nall_files = list(glob.iglob('examples/*/flash_config.h'))\nfor f in all_files:\n    shutil.copyfile(new_file, f)",
        "detail": "libraries.Adafruit_SPIFlash.tools.update_flash_config",
        "documentation": {}
    },
    {
        "label": "all_files",
        "kind": 5,
        "importPath": "libraries.Adafruit_SPIFlash.tools.update_flash_config",
        "description": "libraries.Adafruit_SPIFlash.tools.update_flash_config",
        "peekOfCode": "all_files = list(glob.iglob('examples/*/flash_config.h'))\nfor f in all_files:\n    shutil.copyfile(new_file, f)",
        "detail": "libraries.Adafruit_SPIFlash.tools.update_flash_config",
        "documentation": {}
    },
    {
        "label": "MsgType",
        "kind": 6,
        "importPath": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "description": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "peekOfCode": "class MsgType:\n    RSP    = 0\n    LOGIN  = 2\n    PING   = 6\n    BRIDGE = 15\n    HW_SYNC = 16\n    HW_INFO = 17\n    HW     = 20\nclass MsgStatus:\n    OK     = 200",
        "detail": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "documentation": {}
    },
    {
        "label": "MsgStatus",
        "kind": 6,
        "importPath": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "description": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "peekOfCode": "class MsgStatus:\n    OK     = 200\ndef compose(msg_type, *args):\n    # Convert params to string and join using \\0\n    data = \"\\0\".join(map(str, args))\n    msg_id = genMsgId()\n    msg_len = len(data)\n    log.debug(\" < %2d,%2d,%2d : %s\", msg_type, msg_id, msg_len, \"=\".join(map(str, args)))\n    return hdr.pack(msg_type, msg_id, msg_len) + data.encode('utf-8')\nstatic_msg_id = 0",
        "detail": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "documentation": {}
    },
    {
        "label": "opAction",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "description": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "peekOfCode": "def opAction(op, expand=False, minargs=1):\n    class _action(argparse.Action):\n        def __call__(self, parser, namespace, values, option_string=None):\n            if len(values) < minargs:\n                raise argparse.ArgumentError(self, \"not enough parameters\")\n            if expand:\n                pin = values[0]\n                for v in values[1:]:\n                    namespace.ops.append([op, pin, v])\n            else:",
        "detail": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "documentation": {}
    },
    {
        "label": "compose",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "description": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "peekOfCode": "def compose(msg_type, *args):\n    # Convert params to string and join using \\0\n    data = \"\\0\".join(map(str, args))\n    msg_id = genMsgId()\n    msg_len = len(data)\n    log.debug(\" < %2d,%2d,%2d : %s\", msg_type, msg_id, msg_len, \"=\".join(map(str, args)))\n    return hdr.pack(msg_type, msg_id, msg_len) + data.encode('utf-8')\nstatic_msg_id = 0\ndef genMsgId():\n    global static_msg_id",
        "detail": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "documentation": {}
    },
    {
        "label": "genMsgId",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "description": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "peekOfCode": "def genMsgId():\n    global static_msg_id\n    static_msg_id += 1\n    return static_msg_id\ndef receive(sock, length):\n    d = []\n    l = 0\n    while l < length:\n        r = ''\n        try:",
        "detail": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "documentation": {}
    },
    {
        "label": "receive",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "description": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "peekOfCode": "def receive(sock, length):\n    d = []\n    l = 0\n    while l < length:\n        r = ''\n        try:\n            r = sock.recv(length-l)\n        except socket.timeout:\n            continue\n        if not r:",
        "detail": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "documentation": {}
    },
    {
        "label": "do_read",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "description": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "peekOfCode": "def do_read(cmd, pin):\n    conn.sendall(compose(MsgType.HW_SYNC, cmd, pin))\n    while True:\n        data = receive(conn, hdr.size)\n        if not data:\n            log.warning(\"Data read timeout\")\n            sys.exit(1)\n        msg_type, msg_id, msg_len = hdr.unpack(data)\n        if msg_type == MsgType.RSP:\n            log.debug(\" > %2d,%2d    : status %2d\", msg_type, msg_id, msg_len)",
        "detail": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "description": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "peekOfCode": "parser = argparse.ArgumentParser(\n    formatter_class=argparse.RawTextHelpFormatter,\n    description = 'This script uses Bridge feature to control another device from the command line.',\n    epilog = __doc__\n)\ndef opAction(op, expand=False, minargs=1):\n    class _action(argparse.Action):\n        def __call__(self, parser, namespace, values, option_string=None):\n            if len(values) < minargs:\n                raise argparse.ArgumentError(self, \"not enough parameters\")",
        "detail": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "description": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "peekOfCode": "args = parser.parse_args()\n#import pprint\n#pprint.pprint(args)\n#sys.exit()\nlogging.basicConfig(level=logging.INFO,\n                    format='%(asctime)s %(message)s')\nlog = logging.getLogger(\"blynk_ctrl\")\nif not args.target and args.token:\n    args.target = args.token\nif not args.token:",
        "detail": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "description": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "peekOfCode": "log = logging.getLogger(\"blynk_ctrl\")\nif not args.target and args.token:\n    args.target = args.token\nif not args.token:\n    parser.error(\"token not specified!\")\nif args.dump:\n    log.setLevel(logging.DEBUG)\n# Helpers\nhdr = struct.Struct(\"!BHH\")\nclass MsgType:",
        "detail": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "documentation": {}
    },
    {
        "label": "hdr",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "description": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "peekOfCode": "hdr = struct.Struct(\"!BHH\")\nclass MsgType:\n    RSP    = 0\n    LOGIN  = 2\n    PING   = 6\n    BRIDGE = 15\n    HW_SYNC = 16\n    HW_INFO = 17\n    HW     = 20\nclass MsgStatus:",
        "detail": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "documentation": {}
    },
    {
        "label": "static_msg_id",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "description": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "peekOfCode": "static_msg_id = 0\ndef genMsgId():\n    global static_msg_id\n    static_msg_id += 1\n    return static_msg_id\ndef receive(sock, length):\n    d = []\n    l = 0\n    while l < length:\n        r = ''",
        "detail": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "description": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "peekOfCode": "data = receive(conn, hdr.size)\nif not data:\n    log.error(\"Login timeout\")\n    sys.exit(1)\nmsg_type, msg_id, msg_status = hdr.unpack(data)\nif msg_type != MsgType.RSP or msg_status != MsgStatus.OK:\n    log.error(\"Login failed: %d,%d,%d\", msg_type, msg_id, msg_status)\n    sys.exit(1)\ndef do_read(cmd, pin):\n    conn.sendall(compose(MsgType.HW_SYNC, cmd, pin))",
        "detail": "libraries.blynk-library-master.scripts.blynk_ctrl",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "def log(msg):\n    print \"[{:7.3f}] {:}\".format(float(time.time() - start_time), msg)\ndraw_col = 0\ndef draw(c):\n    global draw_col\n    if not DUMP:\n        sys.stdout.write(c)\n        draw_col = (draw_col + 1) % 120\n        if draw_col:\n            sys.stdout.flush()",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "def draw(c):\n    global draw_col\n    if not DUMP:\n        sys.stdout.write(c)\n        draw_col = (draw_col + 1) % 120\n        if draw_col:\n            sys.stdout.flush()\n        else:\n            sys.stdout.write(\"\\n\")\ndef dump(msg):",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "dump",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "def dump(msg):\n    if DUMP:\n        log(msg)\ndef receive(sock, length):\n\td = []\n\tl = 0\n\twhile l < length:\n\t\tr = sock.recv(length-l)\n\t\tif not r:\n\t\t\treturn ''",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "receive",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "def receive(sock, length):\n\td = []\n\tl = 0\n\twhile l < length:\n\t\tr = sock.recv(length-l)\n\t\tif not r:\n\t\t\treturn ''\n\t\td.append(r)\n\t\tl += len(r)\n\treturn ''.join(d)",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "readthread",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "def readthread(conn, addr):\n\tglobal msgs_in\n\twhile(msgs_in < MSG_QTY):\n\t\tdata = receive(conn, len(MSG))\n\t\tif data != MSG:\n\t\t\tlog(\"Data is wrong:\" + data)\n\t\t\t#break\n\t\tdraw('v')\n\t\tdump(\"> \" + data)\n\t\tmsgs_in += 1",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "writethread",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "def writethread(conn, addr):\n    global msgs_out\n    while (msgs_out < MSG_QTY):\n        conn.sendall(MSG)\n        draw('.')\n        dump(\"< \" + MSG)\n        msgs_out += 1\n        time.sleep(SLEEP)\n# Main code\nserv = socket.socket(socket.AF_INET, socket.SOCK_STREAM)",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "HOST",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "HOST = ''       # Bind to all interfaces\nPORT = 8888     # Bind to port 8888\nNODELAY = 0     # No TCP_NODELAY\nSNDBUF = 0      # No SNDBUF override\nRCVBUF = 0      # No RCVBUF override\nMSG_QTY = 10    # Amount of messages\nSLEEP = 1.0     # Wait some time between IO\nMSG = \"message\" # Message\nDUMP = 0\nfor o, v in opts:",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "PORT = 8888     # Bind to port 8888\nNODELAY = 0     # No TCP_NODELAY\nSNDBUF = 0      # No SNDBUF override\nRCVBUF = 0      # No RCVBUF override\nMSG_QTY = 10    # Amount of messages\nSLEEP = 1.0     # Wait some time between IO\nMSG = \"message\" # Message\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "NODELAY",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "NODELAY = 0     # No TCP_NODELAY\nSNDBUF = 0      # No SNDBUF override\nRCVBUF = 0      # No RCVBUF override\nMSG_QTY = 10    # Amount of messages\nSLEEP = 1.0     # Wait some time between IO\nMSG = \"message\" # Message\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        print __doc__",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "SNDBUF",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "SNDBUF = 0      # No SNDBUF override\nRCVBUF = 0      # No RCVBUF override\nMSG_QTY = 10    # Amount of messages\nSLEEP = 1.0     # Wait some time between IO\nMSG = \"message\" # Message\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        print __doc__\n        sys.exit()",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "RCVBUF",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "RCVBUF = 0      # No RCVBUF override\nMSG_QTY = 10    # Amount of messages\nSLEEP = 1.0     # Wait some time between IO\nMSG = \"message\" # Message\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        print __doc__\n        sys.exit()\n    elif o in (\"-b\", \"--bind\"):",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "MSG_QTY",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "MSG_QTY = 10    # Amount of messages\nSLEEP = 1.0     # Wait some time between IO\nMSG = \"message\" # Message\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        print __doc__\n        sys.exit()\n    elif o in (\"-b\", \"--bind\"):\n        HOST = v",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "SLEEP",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "SLEEP = 1.0     # Wait some time between IO\nMSG = \"message\" # Message\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        print __doc__\n        sys.exit()\n    elif o in (\"-b\", \"--bind\"):\n        HOST = v\n    elif o in (\"-p\", \"--port\"):",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "MSG",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "MSG = \"message\" # Message\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        print __doc__\n        sys.exit()\n    elif o in (\"-b\", \"--bind\"):\n        HOST = v\n    elif o in (\"-p\", \"--port\"):\n        PORT = int(v)",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "DUMP",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "DUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        print __doc__\n        sys.exit()\n    elif o in (\"-b\", \"--bind\"):\n        HOST = v\n    elif o in (\"-p\", \"--port\"):\n        PORT = int(v)\n    elif o in (\"--sndbuf\",):",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "start_time = time.time()\ndef log(msg):\n    print \"[{:7.3f}] {:}\".format(float(time.time() - start_time), msg)\ndraw_col = 0\ndef draw(c):\n    global draw_col\n    if not DUMP:\n        sys.stdout.write(c)\n        draw_col = (draw_col + 1) % 120\n        if draw_col:",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "draw_col",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "draw_col = 0\ndef draw(c):\n    global draw_col\n    if not DUMP:\n        sys.stdout.write(c)\n        draw_col = (draw_col + 1) % 120\n        if draw_col:\n            sys.stdout.flush()\n        else:\n            sys.stdout.write(\"\\n\")",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "\td",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "\td = []\n\tl = 0\n\twhile l < length:\n\t\tr = sock.recv(length-l)\n\t\tif not r:\n\t\t\treturn ''\n\t\td.append(r)\n\t\tl += len(r)\n\treturn ''.join(d)\n# Threads",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "\tl",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "\tl = 0\n\twhile l < length:\n\t\tr = sock.recv(length-l)\n\t\tif not r:\n\t\t\treturn ''\n\t\td.append(r)\n\t\tl += len(r)\n\treturn ''.join(d)\n# Threads\ndef readthread(conn, addr):",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "\t\tr",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "\t\tr = sock.recv(length-l)\n\t\tif not r:\n\t\t\treturn ''\n\t\td.append(r)\n\t\tl += len(r)\n\treturn ''.join(d)\n# Threads\ndef readthread(conn, addr):\n\tglobal msgs_in\n\twhile(msgs_in < MSG_QTY):",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "\t\tdata = receive(conn, len(MSG))\n\t\tif data != MSG:\n\t\t\tlog(\"Data is wrong:\" + data)\n\t\t\t#break\n\t\tdraw('v')\n\t\tdump(\"> \" + data)\n\t\tmsgs_in += 1\ndef writethread(conn, addr):\n    global msgs_out\n    while (msgs_out < MSG_QTY):",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "serv",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "serv = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ntry:\n    # Set SO_REUSEADDR, this is needed to ignore WAIT state on next run\n    serv.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    serv.bind((HOST, PORT))\nexcept socket.error as msg:\n    log('Bind failed. Error Code: {0}, Msg: {1}'.format(str(msg[0]), msg[1]))\n    sys.exit()\nserv.listen(1)\nlog('Listening on port %d' % PORT)",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "\tsndbuf",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "\tsndbuf = conn.getsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF)\n\tlog('Default SNDBUF %s changed to %s' % (sndbuf, SNDBUF))\n\tconn.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, SNDBUF)\nif RCVBUF != 0:\n\trcvbuf = conn.getsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF)\n\tlog('Default RCVBUF %s changed to %s' % (rcvbuf, RCVBUF))\n\tconn.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, RCVBUF)\nproc_start = time.time()\nmsgs_in = 0\nmsgs_out = 0",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "\trcvbuf",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "\trcvbuf = conn.getsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF)\n\tlog('Default RCVBUF %s changed to %s' % (rcvbuf, RCVBUF))\n\tconn.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, RCVBUF)\nproc_start = time.time()\nmsgs_in = 0\nmsgs_out = 0\nwt = Thread(target=readthread,  args=(conn, addr))\nrt = Thread(target=writethread, args=(conn, addr))\nwt.start()\nrt.start()",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "proc_start",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "proc_start = time.time()\nmsgs_in = 0\nmsgs_out = 0\nwt = Thread(target=readthread,  args=(conn, addr))\nrt = Thread(target=writethread, args=(conn, addr))\nwt.start()\nrt.start()\nwt.join()\nrt.join()\ndraw(\"\\n\")",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "msgs_in",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "msgs_in = 0\nmsgs_out = 0\nwt = Thread(target=readthread,  args=(conn, addr))\nrt = Thread(target=writethread, args=(conn, addr))\nwt.start()\nrt.start()\nwt.join()\nrt.join()\ndraw(\"\\n\")\nlog(\"Time %3.4f\" % (time.time() - proc_start))",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "msgs_out",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "msgs_out = 0\nwt = Thread(target=readthread,  args=(conn, addr))\nrt = Thread(target=writethread, args=(conn, addr))\nwt.start()\nrt.start()\nwt.join()\nrt.join()\ndraw(\"\\n\")\nlog(\"Time %3.4f\" % (time.time() - proc_start))\nlog(\"Sent {0} messages\".format(msgs_out))",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "wt",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "wt = Thread(target=readthread,  args=(conn, addr))\nrt = Thread(target=writethread, args=(conn, addr))\nwt.start()\nrt.start()\nwt.join()\nrt.join()\ndraw(\"\\n\")\nlog(\"Time %3.4f\" % (time.time() - proc_start))\nlog(\"Sent {0} messages\".format(msgs_out))\nlog(\"Recv {0} messages\".format(msgs_in))",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "rt",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.loopback",
        "description": "libraries.blynk-library-master.tests.loopback",
        "peekOfCode": "rt = Thread(target=writethread, args=(conn, addr))\nwt.start()\nrt.start()\nwt.join()\nrt.join()\ndraw(\"\\n\")\nlog(\"Time %3.4f\" % (time.time() - proc_start))\nlog(\"Sent {0} messages\".format(msgs_out))\nlog(\"Recv {0} messages\".format(msgs_in))\nconn.close()",
        "detail": "libraries.blynk-library-master.tests.loopback",
        "documentation": {}
    },
    {
        "label": "MsgType",
        "kind": 6,
        "importPath": "libraries.blynk-library-master.tests.pseudo-library",
        "description": "libraries.blynk-library-master.tests.pseudo-library",
        "peekOfCode": "class MsgType:\n    RSP    = 0\n    LOGIN  = 2\n    PING   = 6\n    BRIDGE = 15\n    HW     = 20\nclass MsgStatus:\n    OK     = 200\ndef hw(*args):\n    # Convert params to string and join using \\0",
        "detail": "libraries.blynk-library-master.tests.pseudo-library",
        "documentation": {}
    },
    {
        "label": "MsgStatus",
        "kind": 6,
        "importPath": "libraries.blynk-library-master.tests.pseudo-library",
        "description": "libraries.blynk-library-master.tests.pseudo-library",
        "peekOfCode": "class MsgStatus:\n    OK     = 200\ndef hw(*args):\n    # Convert params to string and join using \\0\n    data = \"\\0\".join(map(str, args))\n    dump(\"< \" + \" \".join(map(str, args)))\n    # Prepend HW command header\n    return hdr.pack(MsgType.HW, genMsgId(), len(data)) + data\ndef handle_hw(data):\n    params = data.split(\"\\0\")",
        "detail": "libraries.blynk-library-master.tests.pseudo-library",
        "documentation": {}
    },
    {
        "label": "hw",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.pseudo-library",
        "description": "libraries.blynk-library-master.tests.pseudo-library",
        "peekOfCode": "def hw(*args):\n    # Convert params to string and join using \\0\n    data = \"\\0\".join(map(str, args))\n    dump(\"< \" + \" \".join(map(str, args)))\n    # Prepend HW command header\n    return hdr.pack(MsgType.HW, genMsgId(), len(data)) + data\ndef handle_hw(data):\n    params = data.split(\"\\0\")\n    cmd = params.pop(0)\n    if cmd == 'info':",
        "detail": "libraries.blynk-library-master.tests.pseudo-library",
        "documentation": {}
    },
    {
        "label": "handle_hw",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.pseudo-library",
        "description": "libraries.blynk-library-master.tests.pseudo-library",
        "peekOfCode": "def handle_hw(data):\n    params = data.split(\"\\0\")\n    cmd = params.pop(0)\n    if cmd == 'info':\n        pass\n    ### DIRECT pin operations\n    elif cmd == 'pm':\n        pairs = zip(params[0::2], params[1::2])\n        for (pin, mode) in pairs:\n            pin = int(pin)",
        "detail": "libraries.blynk-library-master.tests.pseudo-library",
        "documentation": {}
    },
    {
        "label": "genMsgId",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.pseudo-library",
        "description": "libraries.blynk-library-master.tests.pseudo-library",
        "peekOfCode": "def genMsgId():\n    global static_msg_id\n    static_msg_id += 1\n    return static_msg_id\n# Other utilities\nstart_time = time.time()\ndef log(msg):\n    print \"[{:7.3f}] {:}\".format(float(time.time() - start_time), msg)\ndef dump(msg):\n    if DUMP:",
        "detail": "libraries.blynk-library-master.tests.pseudo-library",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.pseudo-library",
        "description": "libraries.blynk-library-master.tests.pseudo-library",
        "peekOfCode": "def log(msg):\n    print \"[{:7.3f}] {:}\".format(float(time.time() - start_time), msg)\ndef dump(msg):\n    if DUMP:\n        log(msg)\ndef receive(sock, length):\n    d = []\n    l = 0\n    while l < length:\n        r = ''",
        "detail": "libraries.blynk-library-master.tests.pseudo-library",
        "documentation": {}
    },
    {
        "label": "dump",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.pseudo-library",
        "description": "libraries.blynk-library-master.tests.pseudo-library",
        "peekOfCode": "def dump(msg):\n    if DUMP:\n        log(msg)\ndef receive(sock, length):\n    d = []\n    l = 0\n    while l < length:\n        r = ''\n        try:\n            r = sock.recv(length-l)",
        "detail": "libraries.blynk-library-master.tests.pseudo-library",
        "documentation": {}
    },
    {
        "label": "receive",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.pseudo-library",
        "description": "libraries.blynk-library-master.tests.pseudo-library",
        "peekOfCode": "def receive(sock, length):\n    d = []\n    l = 0\n    while l < length:\n        r = ''\n        try:\n            r = sock.recv(length-l)\n        except socket.timeout:\n            continue\n        if not r:",
        "detail": "libraries.blynk-library-master.tests.pseudo-library",
        "documentation": {}
    },
    {
        "label": "readthread",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.pseudo-library",
        "description": "libraries.blynk-library-master.tests.pseudo-library",
        "peekOfCode": "def readthread(conn):\n    while (True):\n        data = receive(conn, hdr.size)\n        if not data:\n            break\n        msg_type, msg_id, msg_len = hdr.unpack(data)\n        dump(\"Got {0}, {1}, {2}\".format(msg_type, msg_id, msg_len))\n        if msg_type == MsgType.RSP:\n            pass\n        elif msg_type == MsgType.PING:",
        "detail": "libraries.blynk-library-master.tests.pseudo-library",
        "documentation": {}
    },
    {
        "label": "writethread",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.pseudo-library",
        "description": "libraries.blynk-library-master.tests.pseudo-library",
        "peekOfCode": "def writethread(conn):\n    while (True):\n        time.sleep(10)\n        log(\"Sending heartbeat...\")\n        conn.sendall(hdr.pack(MsgType.PING, genMsgId(), 0))\n# Main code\nlog('Connecting to %s:%d' % (SERVER, PORT))\ntry:\n    conn = socket.create_connection((SERVER, PORT), 3)\nexcept:",
        "detail": "libraries.blynk-library-master.tests.pseudo-library",
        "documentation": {}
    },
    {
        "label": "SERVER",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-library",
        "description": "libraries.blynk-library-master.tests.pseudo-library",
        "peekOfCode": "SERVER = \"blynk-cloud.com\"\nPORT = 80\nNODELAY = 1     # TCP_NODELAY\nSNDBUF = 0      # No SNDBUF override\nRCVBUF = 0      # No RCVBUF override\nTOKEN = \"YourAuthToken\"\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        print __doc__",
        "detail": "libraries.blynk-library-master.tests.pseudo-library",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-library",
        "description": "libraries.blynk-library-master.tests.pseudo-library",
        "peekOfCode": "PORT = 80\nNODELAY = 1     # TCP_NODELAY\nSNDBUF = 0      # No SNDBUF override\nRCVBUF = 0      # No RCVBUF override\nTOKEN = \"YourAuthToken\"\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        print __doc__\n        sys.exit()",
        "detail": "libraries.blynk-library-master.tests.pseudo-library",
        "documentation": {}
    },
    {
        "label": "NODELAY",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-library",
        "description": "libraries.blynk-library-master.tests.pseudo-library",
        "peekOfCode": "NODELAY = 1     # TCP_NODELAY\nSNDBUF = 0      # No SNDBUF override\nRCVBUF = 0      # No RCVBUF override\nTOKEN = \"YourAuthToken\"\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        print __doc__\n        sys.exit()\n    elif o in (\"-s\", \"--server\"):",
        "detail": "libraries.blynk-library-master.tests.pseudo-library",
        "documentation": {}
    },
    {
        "label": "SNDBUF",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-library",
        "description": "libraries.blynk-library-master.tests.pseudo-library",
        "peekOfCode": "SNDBUF = 0      # No SNDBUF override\nRCVBUF = 0      # No RCVBUF override\nTOKEN = \"YourAuthToken\"\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        print __doc__\n        sys.exit()\n    elif o in (\"-s\", \"--server\"):\n        SERVER = v",
        "detail": "libraries.blynk-library-master.tests.pseudo-library",
        "documentation": {}
    },
    {
        "label": "RCVBUF",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-library",
        "description": "libraries.blynk-library-master.tests.pseudo-library",
        "peekOfCode": "RCVBUF = 0      # No RCVBUF override\nTOKEN = \"YourAuthToken\"\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        print __doc__\n        sys.exit()\n    elif o in (\"-s\", \"--server\"):\n        SERVER = v\n    elif o in (\"-p\", \"--port\"):",
        "detail": "libraries.blynk-library-master.tests.pseudo-library",
        "documentation": {}
    },
    {
        "label": "TOKEN",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-library",
        "description": "libraries.blynk-library-master.tests.pseudo-library",
        "peekOfCode": "TOKEN = \"YourAuthToken\"\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        print __doc__\n        sys.exit()\n    elif o in (\"-s\", \"--server\"):\n        SERVER = v\n    elif o in (\"-p\", \"--port\"):\n        PORT = int(v)",
        "detail": "libraries.blynk-library-master.tests.pseudo-library",
        "documentation": {}
    },
    {
        "label": "DUMP",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-library",
        "description": "libraries.blynk-library-master.tests.pseudo-library",
        "peekOfCode": "DUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        print __doc__\n        sys.exit()\n    elif o in (\"-s\", \"--server\"):\n        SERVER = v\n    elif o in (\"-p\", \"--port\"):\n        PORT = int(v)\n    elif o in (\"-t\", \"--token\"):",
        "detail": "libraries.blynk-library-master.tests.pseudo-library",
        "documentation": {}
    },
    {
        "label": "hdr",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-library",
        "description": "libraries.blynk-library-master.tests.pseudo-library",
        "peekOfCode": "hdr = struct.Struct(\"!BHH\")\nclass MsgType:\n    RSP    = 0\n    LOGIN  = 2\n    PING   = 6\n    BRIDGE = 15\n    HW     = 20\nclass MsgStatus:\n    OK     = 200\ndef hw(*args):",
        "detail": "libraries.blynk-library-master.tests.pseudo-library",
        "documentation": {}
    },
    {
        "label": "static_msg_id",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-library",
        "description": "libraries.blynk-library-master.tests.pseudo-library",
        "peekOfCode": "static_msg_id = 1\ndef genMsgId():\n    global static_msg_id\n    static_msg_id += 1\n    return static_msg_id\n# Other utilities\nstart_time = time.time()\ndef log(msg):\n    print \"[{:7.3f}] {:}\".format(float(time.time() - start_time), msg)\ndef dump(msg):",
        "detail": "libraries.blynk-library-master.tests.pseudo-library",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-library",
        "description": "libraries.blynk-library-master.tests.pseudo-library",
        "peekOfCode": "start_time = time.time()\ndef log(msg):\n    print \"[{:7.3f}] {:}\".format(float(time.time() - start_time), msg)\ndef dump(msg):\n    if DUMP:\n        log(msg)\ndef receive(sock, length):\n    d = []\n    l = 0\n    while l < length:",
        "detail": "libraries.blynk-library-master.tests.pseudo-library",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-library",
        "description": "libraries.blynk-library-master.tests.pseudo-library",
        "peekOfCode": "data = receive(conn, hdr.size)\nif not data:\n    log(\"Auth timeout\")\n    sys.exit(1)\nmsg_type, msg_id, status = hdr.unpack(data)\ndump(\"Got {0}, {1}, {2}\".format(msg_type, msg_id, status))\nif status != MsgStatus.OK:\n    log(\"Auth failed: %d\" % status)\n    sys.exit(1)\nwt = Thread(target=readthread,  args=(conn,))",
        "detail": "libraries.blynk-library-master.tests.pseudo-library",
        "documentation": {}
    },
    {
        "label": "wt",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-library",
        "description": "libraries.blynk-library-master.tests.pseudo-library",
        "peekOfCode": "wt = Thread(target=readthread,  args=(conn,))\nrt = Thread(target=writethread, args=(conn,))\nwt.start()\nrt.start()\nwt.join()\nrt.join()\nconn.close()",
        "detail": "libraries.blynk-library-master.tests.pseudo-library",
        "documentation": {}
    },
    {
        "label": "rt",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-library",
        "description": "libraries.blynk-library-master.tests.pseudo-library",
        "peekOfCode": "rt = Thread(target=writethread, args=(conn,))\nwt.start()\nrt.start()\nwt.join()\nrt.join()\nconn.close()",
        "detail": "libraries.blynk-library-master.tests.pseudo-library",
        "documentation": {}
    },
    {
        "label": "MsgType",
        "kind": 6,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "class MsgType:\n    RSP    = 0\n    LOGIN  = 2\n    PING   = 6\n    HW     = 20\nclass MsgStatus:\n    OK     = 200\ndef hw(*args):\n    # Convert params to string and join using \\0\n    data = \"\\0\".join(map(str, args))",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "MsgStatus",
        "kind": 6,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "class MsgStatus:\n    OK     = 200\ndef hw(*args):\n    # Convert params to string and join using \\0\n    data = \"\\0\".join(map(str, args))\n    dump(\"< \" + \" \".join(map(str, args)))\n    # Prepend HW command header\n    return hdr.pack(MsgType.HW, 1, len(data)) + data\n# Print utilities\nstart_time = time.time()",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "hw",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "def hw(*args):\n    # Convert params to string and join using \\0\n    data = \"\\0\".join(map(str, args))\n    dump(\"< \" + \" \".join(map(str, args)))\n    # Prepend HW command header\n    return hdr.pack(MsgType.HW, 1, len(data)) + data\n# Print utilities\nstart_time = time.time()\ndef log(msg):\n    print \"[{:7.3f}] {:}\".format(float(time.time() - start_time), msg)",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "def log(msg):\n    print \"[{:7.3f}] {:}\".format(float(time.time() - start_time), msg)\ndraw_col = 0\ndef draw(c):\n    global draw_col\n    if not DUMP:\n        sys.stdout.write(c)\n        draw_col = (draw_col + 1) % 120\n        if draw_col:\n            sys.stdout.flush()",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "def draw(c):\n    global draw_col\n    if not DUMP:\n        sys.stdout.write(c)\n        draw_col = (draw_col + 1) % 120\n        if draw_col:\n            sys.stdout.flush()\n        else:\n            sys.stdout.write(\"\\n\")\ndef dump(msg):",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "dump",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "def dump(msg):\n    if DUMP:\n        log(msg)\ndef receive(sock, length):\n\td = []\n\tl = 0\n\twhile l < length:\n\t\tr = sock.recv(length-l)\n\t\tif not r:\n\t\t\treturn ''",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "receive",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "def receive(sock, length):\n\td = []\n\tl = 0\n\twhile l < length:\n\t\tr = sock.recv(length-l)\n\t\tif not r:\n\t\t\treturn ''\n\t\td.append(r)\n\t\tl += len(r)\n\treturn ''.join(d)",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "readthread",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "def readthread(conn, addr):\n\tglobal msgs_in, authenticated\n\twhile(msgs_in < MSG_QTY):\n\t\tdata = receive(conn, hdr.size)\n\t\tif not data:\n\t\t\tbreak\n\t\tmsg_type, msg_id, msg_len = hdr.unpack(data)\n\t\t#dump(\"Got {0}, {1}, {2}\".format(msg_type, msg_id, msg_len))\n\t\tif msg_type == MsgType.RSP:\n\t\t\tpass",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "writethread",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "def writethread(conn, addr):\n\tglobal msgs_out, authenticated\n\twhile (msgs_out < MSG_QTY):\n\t\tif authenticated:\n\t\t\tconn.sendall(hw(\"ar\", HW_PIN))\n\t\t\tdraw('.')\n\t\t\tmsgs_out += 1\n\t\ttime.sleep(SLEEP)\n# Main code\nserv = socket.socket(socket.AF_INET, socket.SOCK_STREAM)",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "HOST",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "HOST = ''       # Bind to all interfaces\nPORT = 8888     # Bind to port 8888\nNODELAY = 0     # No TCP_NODELAY\nSNDBUF = 0      # No SNDBUF override\nRCVBUF = 0      # No RCVBUF override\nMSG_QTY = 10    # Amount of messages\nSLEEP = 1.0     # Wait some time between IO\nHW_PIN = \"A0\"   # Pin #\nDUMP = 0\nfor o, v in opts:",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "PORT = 8888     # Bind to port 8888\nNODELAY = 0     # No TCP_NODELAY\nSNDBUF = 0      # No SNDBUF override\nRCVBUF = 0      # No RCVBUF override\nMSG_QTY = 10    # Amount of messages\nSLEEP = 1.0     # Wait some time between IO\nHW_PIN = \"A0\"   # Pin #\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "NODELAY",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "NODELAY = 0     # No TCP_NODELAY\nSNDBUF = 0      # No SNDBUF override\nRCVBUF = 0      # No RCVBUF override\nMSG_QTY = 10    # Amount of messages\nSLEEP = 1.0     # Wait some time between IO\nHW_PIN = \"A0\"   # Pin #\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        print __doc__",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "SNDBUF",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "SNDBUF = 0      # No SNDBUF override\nRCVBUF = 0      # No RCVBUF override\nMSG_QTY = 10    # Amount of messages\nSLEEP = 1.0     # Wait some time between IO\nHW_PIN = \"A0\"   # Pin #\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        print __doc__\n        sys.exit()",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "RCVBUF",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "RCVBUF = 0      # No RCVBUF override\nMSG_QTY = 10    # Amount of messages\nSLEEP = 1.0     # Wait some time between IO\nHW_PIN = \"A0\"   # Pin #\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        print __doc__\n        sys.exit()\n    elif o in (\"-b\", \"--bind\"):",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "MSG_QTY",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "MSG_QTY = 10    # Amount of messages\nSLEEP = 1.0     # Wait some time between IO\nHW_PIN = \"A0\"   # Pin #\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        print __doc__\n        sys.exit()\n    elif o in (\"-b\", \"--bind\"):\n        HOST = v",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "SLEEP",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "SLEEP = 1.0     # Wait some time between IO\nHW_PIN = \"A0\"   # Pin #\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        print __doc__\n        sys.exit()\n    elif o in (\"-b\", \"--bind\"):\n        HOST = v\n    elif o in (\"-p\", \"--port\"):",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "HW_PIN",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "HW_PIN = \"A0\"   # Pin #\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        print __doc__\n        sys.exit()\n    elif o in (\"-b\", \"--bind\"):\n        HOST = v\n    elif o in (\"-p\", \"--port\"):\n        PORT = int(v)",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "DUMP",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "DUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        print __doc__\n        sys.exit()\n    elif o in (\"-b\", \"--bind\"):\n        HOST = v\n    elif o in (\"-p\", \"--port\"):\n        PORT = int(v)\n    elif o in (\"--sndbuf\",):",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "hdr",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "hdr = struct.Struct(\"!BHH\")\nclass MsgType:\n    RSP    = 0\n    LOGIN  = 2\n    PING   = 6\n    HW     = 20\nclass MsgStatus:\n    OK     = 200\ndef hw(*args):\n    # Convert params to string and join using \\0",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "start_time = time.time()\ndef log(msg):\n    print \"[{:7.3f}] {:}\".format(float(time.time() - start_time), msg)\ndraw_col = 0\ndef draw(c):\n    global draw_col\n    if not DUMP:\n        sys.stdout.write(c)\n        draw_col = (draw_col + 1) % 120\n        if draw_col:",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "draw_col",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "draw_col = 0\ndef draw(c):\n    global draw_col\n    if not DUMP:\n        sys.stdout.write(c)\n        draw_col = (draw_col + 1) % 120\n        if draw_col:\n            sys.stdout.flush()\n        else:\n            sys.stdout.write(\"\\n\")",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "\td",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "\td = []\n\tl = 0\n\twhile l < length:\n\t\tr = sock.recv(length-l)\n\t\tif not r:\n\t\t\treturn ''\n\t\td.append(r)\n\t\tl += len(r)\n\treturn ''.join(d)\n# Threads",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "\tl",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "\tl = 0\n\twhile l < length:\n\t\tr = sock.recv(length-l)\n\t\tif not r:\n\t\t\treturn ''\n\t\td.append(r)\n\t\tl += len(r)\n\treturn ''.join(d)\n# Threads\ndef readthread(conn, addr):",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "\t\tr",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "\t\tr = sock.recv(length-l)\n\t\tif not r:\n\t\t\treturn ''\n\t\td.append(r)\n\t\tl += len(r)\n\treturn ''.join(d)\n# Threads\ndef readthread(conn, addr):\n\tglobal msgs_in, authenticated\n\twhile(msgs_in < MSG_QTY):",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "\t\tdata = receive(conn, hdr.size)\n\t\tif not data:\n\t\t\tbreak\n\t\tmsg_type, msg_id, msg_len = hdr.unpack(data)\n\t\t#dump(\"Got {0}, {1}, {2}\".format(msg_type, msg_id, msg_len))\n\t\tif msg_type == MsgType.RSP:\n\t\t\tpass\n\t\telif msg_type == MsgType.LOGIN:\n\t\t\tauth = receive(conn, msg_len)\n\t\t\tlog(\"Auth {0}\".format(auth))",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "\t\t\tauth",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "\t\t\tauth = receive(conn, msg_len)\n\t\t\tlog(\"Auth {0}\".format(auth))\n\t\t\t# Send auth OK and pin modes\n\t\t\tconn.sendall(hdr.pack(MsgType.RSP, msg_id, MsgStatus.OK))\n\t\t\tconn.sendall(hw(\"pm\", HW_PIN, \"in\"))\n\t\t\tauthenticated = True\n\t\telif msg_type == MsgType.PING:\n\t\t\tlog(\"Ping\")\n\t\t\t# Send Pong\n\t\t\tconn.sendall(hdr.pack(MsgType.RSP, msg_id, MsgStatus.OK))",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "\t\t\tauthenticated",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "\t\t\tauthenticated = True\n\t\telif msg_type == MsgType.PING:\n\t\t\tlog(\"Ping\")\n\t\t\t# Send Pong\n\t\t\tconn.sendall(hdr.pack(MsgType.RSP, msg_id, MsgStatus.OK))\n\t\telif msg_type == MsgType.HW:\n\t\t\tdata = receive(conn, msg_len)\n\t\t\t# Print HW messages (just for fun :)\n\t\t\tdraw('v')\n\t\t\tdump(\"> \" + \" \".join(data.split(\"\\0\")))",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "\t\t\tdata = receive(conn, msg_len)\n\t\t\t# Print HW messages (just for fun :)\n\t\t\tdraw('v')\n\t\t\tdump(\"> \" + \" \".join(data.split(\"\\0\")))\n\t\t\tmsgs_in += 1\n\t\telse:\n\t\t\tlog(\"Unknown msg type\")\n\t\t\tbreak\ndef writethread(conn, addr):\n\tglobal msgs_out, authenticated",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "serv",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "serv = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ntry:\n    # Set SO_REUSEADDR, this is needed to ignore WAIT state on next run\n    serv.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    serv.bind((HOST, PORT))\nexcept socket.error as msg:\n    log('Bind failed. Error Code: {0}, Msg: {1}'.format(str(msg[0]), msg[1]))\n    sys.exit()\nserv.listen(1)\nlog('Listening on port %d' % PORT)",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "\tsndbuf",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "\tsndbuf = conn.getsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF)\n\tlog('Default SNDBUF %s changed to %s' % (sndbuf, SNDBUF))\n\tconn.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, SNDBUF)\nif RCVBUF != 0:\n\trcvbuf = conn.getsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF)\n\tlog('Default RCVBUF %s changed to %s' % (rcvbuf, RCVBUF))\n\tconn.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, RCVBUF)\nproc_start = time.time()\nmsgs_in = 0\nmsgs_out = 0",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "\trcvbuf",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "\trcvbuf = conn.getsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF)\n\tlog('Default RCVBUF %s changed to %s' % (rcvbuf, RCVBUF))\n\tconn.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, RCVBUF)\nproc_start = time.time()\nmsgs_in = 0\nmsgs_out = 0\nauthenticated = False\nwt = Thread(target=readthread,  args=(conn, addr))\nrt = Thread(target=writethread, args=(conn, addr))\nwt.start()",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "proc_start",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "proc_start = time.time()\nmsgs_in = 0\nmsgs_out = 0\nauthenticated = False\nwt = Thread(target=readthread,  args=(conn, addr))\nrt = Thread(target=writethread, args=(conn, addr))\nwt.start()\nrt.start()\nwt.join()\nrt.join()",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "msgs_in",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "msgs_in = 0\nmsgs_out = 0\nauthenticated = False\nwt = Thread(target=readthread,  args=(conn, addr))\nrt = Thread(target=writethread, args=(conn, addr))\nwt.start()\nrt.start()\nwt.join()\nrt.join()\ndraw(\"\\n\")",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "msgs_out",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "msgs_out = 0\nauthenticated = False\nwt = Thread(target=readthread,  args=(conn, addr))\nrt = Thread(target=writethread, args=(conn, addr))\nwt.start()\nrt.start()\nwt.join()\nrt.join()\ndraw(\"\\n\")\nlog(\"Time %3.4f\" % (time.time() - proc_start))",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "authenticated",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "authenticated = False\nwt = Thread(target=readthread,  args=(conn, addr))\nrt = Thread(target=writethread, args=(conn, addr))\nwt.start()\nrt.start()\nwt.join()\nrt.join()\ndraw(\"\\n\")\nlog(\"Time %3.4f\" % (time.time() - proc_start))\nlog(\"Sent {0} messages\".format(msgs_out))",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "wt",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "wt = Thread(target=readthread,  args=(conn, addr))\nrt = Thread(target=writethread, args=(conn, addr))\nwt.start()\nrt.start()\nwt.join()\nrt.join()\ndraw(\"\\n\")\nlog(\"Time %3.4f\" % (time.time() - proc_start))\nlog(\"Sent {0} messages\".format(msgs_out))\nlog(\"Recv {0} messages\".format(msgs_in))",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "rt",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "peekOfCode": "rt = Thread(target=writethread, args=(conn, addr))\nwt.start()\nrt.start()\nwt.join()\nrt.join()\ndraw(\"\\n\")\nlog(\"Time %3.4f\" % (time.time() - proc_start))\nlog(\"Sent {0} messages\".format(msgs_out))\nlog(\"Recv {0} messages\".format(msgs_in))\nconn.close()",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-mt",
        "documentation": {}
    },
    {
        "label": "MsgType",
        "kind": 6,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "peekOfCode": "class MsgType:\n    RSP    = 0\n    LOGIN  = 2\n    PING   = 6\n    HW     = 20\nclass MsgStatus:\n    OK     = 200\ndef hw(*args):\n    # Convert params to string and join using \\0\n    data = \"\\0\".join(map(str, args))",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "documentation": {}
    },
    {
        "label": "MsgStatus",
        "kind": 6,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "peekOfCode": "class MsgStatus:\n    OK     = 200\ndef hw(*args):\n    # Convert params to string and join using \\0\n    data = \"\\0\".join(map(str, args))\n    dump(\"< \" + \" \".join(map(str, args)))\n    # Prepend HW command header\n    return hdr.pack(MsgType.HW, 1, len(data)) + data\nstart_time = time.time()\ndef log(msg):",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "documentation": {}
    },
    {
        "label": "hw",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "peekOfCode": "def hw(*args):\n    # Convert params to string and join using \\0\n    data = \"\\0\".join(map(str, args))\n    dump(\"< \" + \" \".join(map(str, args)))\n    # Prepend HW command header\n    return hdr.pack(MsgType.HW, 1, len(data)) + data\nstart_time = time.time()\ndef log(msg):\n    print \"[{:7.3f}] {:}\".format(float(time.time() - start_time), msg)\ndef draw(c):",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "peekOfCode": "def log(msg):\n    print \"[{:7.3f}] {:}\".format(float(time.time() - start_time), msg)\ndef draw(c):\n    if not DUMP:\n        sys.stdout.write(c)\n        sys.stdout.flush()\ndef dump(msg):\n    if DUMP:\n        log(msg)\ndef receive(sock, length):",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "peekOfCode": "def draw(c):\n    if not DUMP:\n        sys.stdout.write(c)\n        sys.stdout.flush()\ndef dump(msg):\n    if DUMP:\n        log(msg)\ndef receive(sock, length):\n\td = []\n\tl = 0",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "documentation": {}
    },
    {
        "label": "dump",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "peekOfCode": "def dump(msg):\n    if DUMP:\n        log(msg)\ndef receive(sock, length):\n\td = []\n\tl = 0\n\twhile l < length:\n\t\tr = sock.recv(length-l)\n\t\tif not r:\n\t\t\treturn ''",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "documentation": {}
    },
    {
        "label": "receive",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "peekOfCode": "def receive(sock, length):\n\td = []\n\tl = 0\n\twhile l < length:\n\t\tr = sock.recv(length-l)\n\t\tif not r:\n\t\t\treturn ''\n\t\td.append(r)\n\t\tl += len(r)\n\treturn ''.join(d)",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "documentation": {}
    },
    {
        "label": "clientthread",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "peekOfCode": "def clientthread(conn, addr):\n    log('Connection from {0}:{1}'.format(addr[0], str(addr[1])))\n    if NODELAY != 0:\n        conn.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n    if SNDBUF != 0:\n        sndbuf = conn.getsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF)\n        log('Default SNDBUF %s changed to %s' % (sndbuf, SNDBUF))\n        conn.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, SNDBUF)\n    if RCVBUF != 0:\n        rcvbuf = conn.getsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF)",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "documentation": {}
    },
    {
        "label": "HOST",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "peekOfCode": "HOST = ''       # Bind to all interfaces\nPORT = 8888     # Bind to port 8888\nNODELAY = 0     # No TCP_NODELAY\nSNDBUF = 0      # No SNDBUF override\nRCVBUF = 0      # No RCVBUF override\nWAIT = -1       # No select timeout\nMSG_QTY = 1000  # Amount of messages\nSLEEP = 0       # Wait some time between IO\nHW_PIN = 14     # Pin #\nDUMP = 0",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "peekOfCode": "PORT = 8888     # Bind to port 8888\nNODELAY = 0     # No TCP_NODELAY\nSNDBUF = 0      # No SNDBUF override\nRCVBUF = 0      # No RCVBUF override\nWAIT = -1       # No select timeout\nMSG_QTY = 1000  # Amount of messages\nSLEEP = 0       # Wait some time between IO\nHW_PIN = 14     # Pin #\nDUMP = 0\nfor o, v in opts:",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "documentation": {}
    },
    {
        "label": "NODELAY",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "peekOfCode": "NODELAY = 0     # No TCP_NODELAY\nSNDBUF = 0      # No SNDBUF override\nRCVBUF = 0      # No RCVBUF override\nWAIT = -1       # No select timeout\nMSG_QTY = 1000  # Amount of messages\nSLEEP = 0       # Wait some time between IO\nHW_PIN = 14     # Pin #\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "documentation": {}
    },
    {
        "label": "SNDBUF",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "peekOfCode": "SNDBUF = 0      # No SNDBUF override\nRCVBUF = 0      # No RCVBUF override\nWAIT = -1       # No select timeout\nMSG_QTY = 1000  # Amount of messages\nSLEEP = 0       # Wait some time between IO\nHW_PIN = 14     # Pin #\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        usage()",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "documentation": {}
    },
    {
        "label": "RCVBUF",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "peekOfCode": "RCVBUF = 0      # No RCVBUF override\nWAIT = -1       # No select timeout\nMSG_QTY = 1000  # Amount of messages\nSLEEP = 0       # Wait some time between IO\nHW_PIN = 14     # Pin #\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        usage()\n        sys.exit()",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "documentation": {}
    },
    {
        "label": "WAIT",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "peekOfCode": "WAIT = -1       # No select timeout\nMSG_QTY = 1000  # Amount of messages\nSLEEP = 0       # Wait some time between IO\nHW_PIN = 14     # Pin #\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        usage()\n        sys.exit()\n    elif o in (\"-b\", \"--bind\"):",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "documentation": {}
    },
    {
        "label": "MSG_QTY",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "peekOfCode": "MSG_QTY = 1000  # Amount of messages\nSLEEP = 0       # Wait some time between IO\nHW_PIN = 14     # Pin #\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        usage()\n        sys.exit()\n    elif o in (\"-b\", \"--bind\"):\n        HOST = v",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "documentation": {}
    },
    {
        "label": "SLEEP",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "peekOfCode": "SLEEP = 0       # Wait some time between IO\nHW_PIN = 14     # Pin #\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        usage()\n        sys.exit()\n    elif o in (\"-b\", \"--bind\"):\n        HOST = v\n    elif o in (\"-p\", \"--port\"):",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "documentation": {}
    },
    {
        "label": "HW_PIN",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "peekOfCode": "HW_PIN = 14     # Pin #\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        usage()\n        sys.exit()\n    elif o in (\"-b\", \"--bind\"):\n        HOST = v\n    elif o in (\"-p\", \"--port\"):\n        PORT = int(v)",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "documentation": {}
    },
    {
        "label": "DUMP",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "peekOfCode": "DUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        usage()\n        sys.exit()\n    elif o in (\"-b\", \"--bind\"):\n        HOST = v\n    elif o in (\"-p\", \"--port\"):\n        PORT = int(v)\n    elif o in (\"--sndbuf\",):",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "documentation": {}
    },
    {
        "label": "hdr",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "peekOfCode": "hdr = struct.Struct(\"!BHH\")\nclass MsgType:\n    RSP    = 0\n    LOGIN  = 2\n    PING   = 6\n    HW     = 20\nclass MsgStatus:\n    OK     = 200\ndef hw(*args):\n    # Convert params to string and join using \\0",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "peekOfCode": "start_time = time.time()\ndef log(msg):\n    print \"[{:7.3f}] {:}\".format(float(time.time() - start_time), msg)\ndef draw(c):\n    if not DUMP:\n        sys.stdout.write(c)\n        sys.stdout.flush()\ndef dump(msg):\n    if DUMP:\n        log(msg)",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "documentation": {}
    },
    {
        "label": "\td",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "peekOfCode": "\td = []\n\tl = 0\n\twhile l < length:\n\t\tr = sock.recv(length-l)\n\t\tif not r:\n\t\t\treturn ''\n\t\td.append(r)\n\t\tl += len(r)\n\treturn ''.join(d)\ndef clientthread(conn, addr):",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "documentation": {}
    },
    {
        "label": "\tl",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "peekOfCode": "\tl = 0\n\twhile l < length:\n\t\tr = sock.recv(length-l)\n\t\tif not r:\n\t\t\treturn ''\n\t\td.append(r)\n\t\tl += len(r)\n\treturn ''.join(d)\ndef clientthread(conn, addr):\n    log('Connection from {0}:{1}'.format(addr[0], str(addr[1])))",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "documentation": {}
    },
    {
        "label": "\t\tr",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "peekOfCode": "\t\tr = sock.recv(length-l)\n\t\tif not r:\n\t\t\treturn ''\n\t\td.append(r)\n\t\tl += len(r)\n\treturn ''.join(d)\ndef clientthread(conn, addr):\n    log('Connection from {0}:{1}'.format(addr[0], str(addr[1])))\n    if NODELAY != 0:\n        conn.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "documentation": {}
    },
    {
        "label": "serv",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "peekOfCode": "serv = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ntry:\n    # Set SO_REUSEADDR, this is needed to ignore WAIT state on next run\n    serv.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    serv.bind((HOST, PORT))\nexcept socket.error as msg:\n    log('Bind failed. Error Code: {0}, Msg: {1}'.format(str(msg[0]), msg[1]))\n    sys.exit()\nserv.listen(10)\nlog('Listening on port %d' % PORT)",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "documentation": {}
    },
    {
        "label": "thread",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "description": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "peekOfCode": "thread = Thread(target=clientthread, args=serv.accept())\nthread.start()\nserv.close()\nthread.join()",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-ar-select",
        "documentation": {}
    },
    {
        "label": "MsgType",
        "kind": 6,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "class MsgType:\n    RSP    = 0\n    LOGIN  = 2\n    PING   = 6\n    HW     = 20\nclass MsgStatus:\n    OK     = 200\ndef hw(*args):\n    # Convert params to string and join using \\0\n    data = \"\\0\".join(map(str, args))",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "MsgStatus",
        "kind": 6,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "class MsgStatus:\n    OK     = 200\ndef hw(*args):\n    # Convert params to string and join using \\0\n    data = \"\\0\".join(map(str, args))\n    dump(\"< \" + \" \".join(map(str, args)))\n    # Prepend HW command header\n    return hdr.pack(MsgType.HW, 1, len(data)) + data\n# Print utilities\nstart_time = time.time()",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "hw",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "def hw(*args):\n    # Convert params to string and join using \\0\n    data = \"\\0\".join(map(str, args))\n    dump(\"< \" + \" \".join(map(str, args)))\n    # Prepend HW command header\n    return hdr.pack(MsgType.HW, 1, len(data)) + data\n# Print utilities\nstart_time = time.time()\ndef log(msg):\n    print \"[{:7.3f}] {:}\".format(float(time.time() - start_time), msg)",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "def log(msg):\n    print \"[{:7.3f}] {:}\".format(float(time.time() - start_time), msg)\ndraw_col = 0\ndef draw(c):\n    global draw_col\n    if not DUMP:\n        sys.stdout.write(c)\n        draw_col = (draw_col + 1) % 120\n        if draw_col:\n            sys.stdout.flush()",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "def draw(c):\n    global draw_col\n    if not DUMP:\n        sys.stdout.write(c)\n        draw_col = (draw_col + 1) % 120\n        if draw_col:\n            sys.stdout.flush()\n        else:\n            sys.stdout.write(\"\\n\")\ndef dump(msg):",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "dump",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "def dump(msg):\n    if DUMP:\n        log(msg)\ndef receive(sock, length):\n\td = []\n\tl = 0\n\twhile l < length:\n\t\tr = sock.recv(length-l)\n\t\tif not r:\n\t\t\treturn ''",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "receive",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "def receive(sock, length):\n\td = []\n\tl = 0\n\twhile l < length:\n\t\tr = sock.recv(length-l)\n\t\tif not r:\n\t\t\treturn ''\n\t\td.append(r)\n\t\tl += len(r)\n\treturn ''.join(d)",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "readthread",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "def readthread(conn, addr):\n\tglobal msgs_in, authenticated\n\twhile(msgs_in < MSG_QTY):\n\t\tdata = receive(conn, hdr.size)\n\t\tif not data:\n\t\t\tbreak\n\t\tmsg_type, msg_id, msg_len = hdr.unpack(data)\n\t\t#dump(\"Got {0}, {1}, {2}\".format(msg_type, msg_id, msg_len))\n\t\tif msg_type == MsgType.RSP:\n\t\t\tpass",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "writethread",
        "kind": 2,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "def writethread(conn, addr):\n\tglobal msgs_out, authenticated\n\tval = 0\n\twhile (msgs_out < MSG_QTY):\n\t\tif authenticated:\n\t\t\tconn.sendall(hw(\"dw\", HW_PIN, val))\n\t\t\tval = 0 if val else 1\n\t\t\tdraw('.')\n\t\t\tmsgs_out += 1\n\t\ttime.sleep(SLEEP)",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "HOST",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "HOST = ''       # Bind to all interfaces\nPORT = 8888     # Bind to port 8888\nNODELAY = 0     # No TCP_NODELAY\nSNDBUF = 0      # No SNDBUF override\nRCVBUF = 0      # No RCVBUF override\nMSG_QTY = 10    # Amount of messages\nSLEEP = 1.0     # Wait some time between IO\nHW_PIN = 14     # Pin #\nDUMP = 0\nfor o, v in opts:",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "PORT = 8888     # Bind to port 8888\nNODELAY = 0     # No TCP_NODELAY\nSNDBUF = 0      # No SNDBUF override\nRCVBUF = 0      # No RCVBUF override\nMSG_QTY = 10    # Amount of messages\nSLEEP = 1.0     # Wait some time between IO\nHW_PIN = 14     # Pin #\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "NODELAY",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "NODELAY = 0     # No TCP_NODELAY\nSNDBUF = 0      # No SNDBUF override\nRCVBUF = 0      # No RCVBUF override\nMSG_QTY = 10    # Amount of messages\nSLEEP = 1.0     # Wait some time between IO\nHW_PIN = 14     # Pin #\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        print __doc__",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "SNDBUF",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "SNDBUF = 0      # No SNDBUF override\nRCVBUF = 0      # No RCVBUF override\nMSG_QTY = 10    # Amount of messages\nSLEEP = 1.0     # Wait some time between IO\nHW_PIN = 14     # Pin #\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        print __doc__\n        sys.exit()",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "RCVBUF",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "RCVBUF = 0      # No RCVBUF override\nMSG_QTY = 10    # Amount of messages\nSLEEP = 1.0     # Wait some time between IO\nHW_PIN = 14     # Pin #\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        print __doc__\n        sys.exit()\n    elif o in (\"-b\", \"--bind\"):",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "MSG_QTY",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "MSG_QTY = 10    # Amount of messages\nSLEEP = 1.0     # Wait some time between IO\nHW_PIN = 14     # Pin #\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        print __doc__\n        sys.exit()\n    elif o in (\"-b\", \"--bind\"):\n        HOST = v",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "SLEEP",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "SLEEP = 1.0     # Wait some time between IO\nHW_PIN = 14     # Pin #\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        print __doc__\n        sys.exit()\n    elif o in (\"-b\", \"--bind\"):\n        HOST = v\n    elif o in (\"-p\", \"--port\"):",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "HW_PIN",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "HW_PIN = 14     # Pin #\nDUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        print __doc__\n        sys.exit()\n    elif o in (\"-b\", \"--bind\"):\n        HOST = v\n    elif o in (\"-p\", \"--port\"):\n        PORT = int(v)",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "DUMP",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "DUMP = 0\nfor o, v in opts:\n    if o in (\"-h\", \"--help\"):\n        print __doc__\n        sys.exit()\n    elif o in (\"-b\", \"--bind\"):\n        HOST = v\n    elif o in (\"-p\", \"--port\"):\n        PORT = int(v)\n    elif o in (\"--sndbuf\",):",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "hdr",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "hdr = struct.Struct(\"!BHH\")\nclass MsgType:\n    RSP    = 0\n    LOGIN  = 2\n    PING   = 6\n    HW     = 20\nclass MsgStatus:\n    OK     = 200\ndef hw(*args):\n    # Convert params to string and join using \\0",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "start_time = time.time()\ndef log(msg):\n    print \"[{:7.3f}] {:}\".format(float(time.time() - start_time), msg)\ndraw_col = 0\ndef draw(c):\n    global draw_col\n    if not DUMP:\n        sys.stdout.write(c)\n        draw_col = (draw_col + 1) % 120\n        if draw_col:",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "draw_col",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "draw_col = 0\ndef draw(c):\n    global draw_col\n    if not DUMP:\n        sys.stdout.write(c)\n        draw_col = (draw_col + 1) % 120\n        if draw_col:\n            sys.stdout.flush()\n        else:\n            sys.stdout.write(\"\\n\")",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "\td",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "\td = []\n\tl = 0\n\twhile l < length:\n\t\tr = sock.recv(length-l)\n\t\tif not r:\n\t\t\treturn ''\n\t\td.append(r)\n\t\tl += len(r)\n\treturn ''.join(d)\n# Threads",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "\tl",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "\tl = 0\n\twhile l < length:\n\t\tr = sock.recv(length-l)\n\t\tif not r:\n\t\t\treturn ''\n\t\td.append(r)\n\t\tl += len(r)\n\treturn ''.join(d)\n# Threads\ndef readthread(conn, addr):",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "\t\tr",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "\t\tr = sock.recv(length-l)\n\t\tif not r:\n\t\t\treturn ''\n\t\td.append(r)\n\t\tl += len(r)\n\treturn ''.join(d)\n# Threads\ndef readthread(conn, addr):\n\tglobal msgs_in, authenticated\n\twhile(msgs_in < MSG_QTY):",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "\t\tdata = receive(conn, hdr.size)\n\t\tif not data:\n\t\t\tbreak\n\t\tmsg_type, msg_id, msg_len = hdr.unpack(data)\n\t\t#dump(\"Got {0}, {1}, {2}\".format(msg_type, msg_id, msg_len))\n\t\tif msg_type == MsgType.RSP:\n\t\t\tpass\n\t\telif msg_type == MsgType.LOGIN:\n\t\t\tauth = receive(conn, msg_len)\n\t\t\tlog(\"Auth {0}\".format(auth))",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "\t\t\tauth",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "\t\t\tauth = receive(conn, msg_len)\n\t\t\tlog(\"Auth {0}\".format(auth))\n\t\t\t# Send auth OK and pin modes\n\t\t\tconn.sendall(hdr.pack(MsgType.RSP, msg_id, MsgStatus.OK))\n\t\t\tconn.sendall(hw(\"pm\", HW_PIN, \"out\"))\n\t\t\tauthenticated = True\n\t\telif msg_type == MsgType.PING:\n\t\t\tlog(\"Ping\")\n\t\t\t# Send Pong\n\t\t\tconn.sendall(hdr.pack(MsgType.RSP, msg_id, MsgStatus.OK))",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "\t\t\tauthenticated",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "\t\t\tauthenticated = True\n\t\telif msg_type == MsgType.PING:\n\t\t\tlog(\"Ping\")\n\t\t\t# Send Pong\n\t\t\tconn.sendall(hdr.pack(MsgType.RSP, msg_id, MsgStatus.OK))\n\t\telif msg_type == MsgType.HW:\n\t\t\tdata = receive(conn, msg_len)\n\t\t\t# Print HW messages (just for fun :)\n\t\t\tdraw('v')\n\t\t\tdump(\"> \" + \" \".join(data.split(\"\\0\")))",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "\t\t\tdata = receive(conn, msg_len)\n\t\t\t# Print HW messages (just for fun :)\n\t\t\tdraw('v')\n\t\t\tdump(\"> \" + \" \".join(data.split(\"\\0\")))\n\t\t\tmsgs_in += 1\n\t\telse:\n\t\t\tlog(\"Unknown msg type\")\n\t\t\tbreak\ndef writethread(conn, addr):\n\tglobal msgs_out, authenticated",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "\tval",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "\tval = 0\n\twhile (msgs_out < MSG_QTY):\n\t\tif authenticated:\n\t\t\tconn.sendall(hw(\"dw\", HW_PIN, val))\n\t\t\tval = 0 if val else 1\n\t\t\tdraw('.')\n\t\t\tmsgs_out += 1\n\t\ttime.sleep(SLEEP)\n# Main code\nserv = socket.socket(socket.AF_INET, socket.SOCK_STREAM)",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "\t\t\tval",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "\t\t\tval = 0 if val else 1\n\t\t\tdraw('.')\n\t\t\tmsgs_out += 1\n\t\ttime.sleep(SLEEP)\n# Main code\nserv = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ntry:\n    # Set SO_REUSEADDR, this is needed to ignore WAIT state on next run\n    serv.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    serv.bind((HOST, PORT))",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "serv",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "serv = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ntry:\n    # Set SO_REUSEADDR, this is needed to ignore WAIT state on next run\n    serv.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    serv.bind((HOST, PORT))\nexcept socket.error as msg:\n    log('Bind failed. Error Code: {0}, Msg: {1}'.format(str(msg[0]), msg[1]))\n    sys.exit()\nserv.listen(1)\nlog('Listening on port %d' % PORT)",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "\tsndbuf",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "\tsndbuf = conn.getsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF)\n\tlog('Default SNDBUF %s changed to %s' % (sndbuf, SNDBUF))\n\tconn.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, SNDBUF)\nif RCVBUF != 0:\n\trcvbuf = conn.getsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF)\n\tlog('Default RCVBUF %s changed to %s' % (rcvbuf, RCVBUF))\n\tconn.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, RCVBUF)\nproc_start = time.time()\nmsgs_in = 0\nmsgs_out = 0",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "\trcvbuf",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "\trcvbuf = conn.getsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF)\n\tlog('Default RCVBUF %s changed to %s' % (rcvbuf, RCVBUF))\n\tconn.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, RCVBUF)\nproc_start = time.time()\nmsgs_in = 0\nmsgs_out = 0\nauthenticated = False\nwt = Thread(target=readthread,  args=(conn, addr))\nrt = Thread(target=writethread, args=(conn, addr))\nwt.start()",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "proc_start",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "proc_start = time.time()\nmsgs_in = 0\nmsgs_out = 0\nauthenticated = False\nwt = Thread(target=readthread,  args=(conn, addr))\nrt = Thread(target=writethread, args=(conn, addr))\nwt.start()\nrt.start()\nwt.join()\n#rt.join()",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "msgs_in",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "msgs_in = 0\nmsgs_out = 0\nauthenticated = False\nwt = Thread(target=readthread,  args=(conn, addr))\nrt = Thread(target=writethread, args=(conn, addr))\nwt.start()\nrt.start()\nwt.join()\n#rt.join()\nconn.close()",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "msgs_out",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "msgs_out = 0\nauthenticated = False\nwt = Thread(target=readthread,  args=(conn, addr))\nrt = Thread(target=writethread, args=(conn, addr))\nwt.start()\nrt.start()\nwt.join()\n#rt.join()\nconn.close()\ndraw(\"\\n\")",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "authenticated",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "authenticated = False\nwt = Thread(target=readthread,  args=(conn, addr))\nrt = Thread(target=writethread, args=(conn, addr))\nwt.start()\nrt.start()\nwt.join()\n#rt.join()\nconn.close()\ndraw(\"\\n\")\nlog(\"Time %3.4f\" % (time.time() - proc_start))",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "wt",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "wt = Thread(target=readthread,  args=(conn, addr))\nrt = Thread(target=writethread, args=(conn, addr))\nwt.start()\nrt.start()\nwt.join()\n#rt.join()\nconn.close()\ndraw(\"\\n\")\nlog(\"Time %3.4f\" % (time.time() - proc_start))\nlog(\"Sent {0} messages\".format(msgs_out))",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "rt",
        "kind": 5,
        "importPath": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "description": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "peekOfCode": "rt = Thread(target=writethread, args=(conn, addr))\nwt.start()\nrt.start()\nwt.join()\n#rt.join()\nconn.close()\ndraw(\"\\n\")\nlog(\"Time %3.4f\" % (time.time() - proc_start))\nlog(\"Sent {0} messages\".format(msgs_out))\nlog(\"Recv {0} messages\".format(msgs_in))",
        "detail": "libraries.blynk-library-master.tests.pseudo-server-dw-mt",
        "documentation": {}
    },
    {
        "label": "ads1115",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_EC_calibration",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_EC_calibration",
        "peekOfCode": "ads1115 = ADS1115()\nec      = DFRobot_EC()\nec.begin()\nwhile True :\n\t#Read your temperature sensor to execute temperature compensation\n\ttemperature = 25\n\t#Set the IIC address\n\tads1115.setAddr_ADS1115(0x48)\n\t#Sets the gain and input voltage range.\n\tads1115.setGain(ADS1115_REG_CONFIG_PGA_6_144V)",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_EC_calibration",
        "documentation": {}
    },
    {
        "label": "\ttemperature",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_EC_calibration",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_EC_calibration",
        "peekOfCode": "\ttemperature = 25\n\t#Set the IIC address\n\tads1115.setAddr_ADS1115(0x48)\n\t#Sets the gain and input voltage range.\n\tads1115.setGain(ADS1115_REG_CONFIG_PGA_6_144V)\n\t#Get the Digital Value of Analog of selected channel\n\tadc0 = ads1115.readVoltage(0)\n\tprint \"A0:%dmV \"%(adc0['r'])\n\t#Calibrate the calibration data\n\tec.calibration(adc0['r'],temperature)",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_EC_calibration",
        "documentation": {}
    },
    {
        "label": "\tadc0",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_EC_calibration",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_EC_calibration",
        "peekOfCode": "\tadc0 = ads1115.readVoltage(0)\n\tprint \"A0:%dmV \"%(adc0['r'])\n\t#Calibrate the calibration data\n\tec.calibration(adc0['r'],temperature)\n\ttime.sleep(3.0)",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_EC_calibration",
        "documentation": {}
    },
    {
        "label": "ec",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_EC_reset",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_EC_reset",
        "peekOfCode": "ec = DFRobot_EC()\nec.reset()\ntime.sleep(0.5)\nsys.exit(1)",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_EC_reset",
        "documentation": {}
    },
    {
        "label": "ads1115",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_calibration",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_calibration",
        "peekOfCode": "ads1115 = ADS1115()\nph      = DFRobot_PH()\nph.begin()\nwhile True :\n\ttemperature = 25\n\t#Set the IIC address\n\tads1115.setAddr_ADS1115(0x48)\n\t#Sets the gain and input voltage range.\n\tads1115.setGain(ADS1115_REG_CONFIG_PGA_6_144V)\n\t#Get the Digital Value of Analog of selected channel",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_calibration",
        "documentation": {}
    },
    {
        "label": "\ttemperature",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_calibration",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_calibration",
        "peekOfCode": "\ttemperature = 25\n\t#Set the IIC address\n\tads1115.setAddr_ADS1115(0x48)\n\t#Sets the gain and input voltage range.\n\tads1115.setGain(ADS1115_REG_CONFIG_PGA_6_144V)\n\t#Get the Digital Value of Analog of selected channel\n\tadc0 = ads1115.readVoltage(0)\n\tprint \"A0:%dmV \"%(adc0['r'])\n\t#Calibrate the calibration data\n\tph.calibration(adc0['r'])",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_calibration",
        "documentation": {}
    },
    {
        "label": "\tadc0",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_calibration",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_calibration",
        "peekOfCode": "\tadc0 = ads1115.readVoltage(0)\n\tprint \"A0:%dmV \"%(adc0['r'])\n\t#Calibrate the calibration data\n\tph.calibration(adc0['r'])\n\ttime.sleep(1.0)",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_calibration",
        "documentation": {}
    },
    {
        "label": "ads1115",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_EC",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_EC",
        "peekOfCode": "ads1115 = ADS1115()\nec      = DFRobot_EC()\nph      = DFRobot_PH()\nec.begin()\nph.begin()\nwhile True :\n\t#Read your temperature sensor to execute temperature compensation\n\ttemperature = 25\n\t#Set the IIC address\n\tads1115.setAddr_ADS1115(0x48)",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_EC",
        "documentation": {}
    },
    {
        "label": "\ttemperature",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_EC",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_EC",
        "peekOfCode": "\ttemperature = 25\n\t#Set the IIC address\n\tads1115.setAddr_ADS1115(0x48)\n\t#Sets the gain and input voltage range.\n\tads1115.setGain(ADS1115_REG_CONFIG_PGA_6_144V)\n\t#Get the Digital Value of Analog of selected channel\n\tadc0 = ads1115.readVoltage(0)\n\tadc1 = ads1115.readVoltage(1)\n\t#Convert voltage to EC with temperature compensation\n\tEC = ec.readEC(adc0['r'],temperature)",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_EC",
        "documentation": {}
    },
    {
        "label": "\tadc0",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_EC",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_EC",
        "peekOfCode": "\tadc0 = ads1115.readVoltage(0)\n\tadc1 = ads1115.readVoltage(1)\n\t#Convert voltage to EC with temperature compensation\n\tEC = ec.readEC(adc0['r'],temperature)\n\tPH = ph.read_PH(adc1['r'],temperature)\n\tprint \"Temperature:%.1f ^C EC:%.2f ms/cm PH:%.2f \" %(temperature,EC,PH)\n\ttime.sleep(1.0)",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_EC",
        "documentation": {}
    },
    {
        "label": "\tadc1",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_EC",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_EC",
        "peekOfCode": "\tadc1 = ads1115.readVoltage(1)\n\t#Convert voltage to EC with temperature compensation\n\tEC = ec.readEC(adc0['r'],temperature)\n\tPH = ph.read_PH(adc1['r'],temperature)\n\tprint \"Temperature:%.1f ^C EC:%.2f ms/cm PH:%.2f \" %(temperature,EC,PH)\n\ttime.sleep(1.0)",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_EC",
        "documentation": {}
    },
    {
        "label": "\tEC",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_EC",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_EC",
        "peekOfCode": "\tEC = ec.readEC(adc0['r'],temperature)\n\tPH = ph.read_PH(adc1['r'],temperature)\n\tprint \"Temperature:%.1f ^C EC:%.2f ms/cm PH:%.2f \" %(temperature,EC,PH)\n\ttime.sleep(1.0)",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_EC",
        "documentation": {}
    },
    {
        "label": "\tPH",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_EC",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_EC",
        "peekOfCode": "\tPH = ph.read_PH(adc1['r'],temperature)\n\tprint \"Temperature:%.1f ^C EC:%.2f ms/cm PH:%.2f \" %(temperature,EC,PH)\n\ttime.sleep(1.0)",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_EC",
        "documentation": {}
    },
    {
        "label": "ads1115",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_read",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_read",
        "peekOfCode": "ads1115 = ADS1115()\nph      = DFRobot_PH()\nph.begin()\nwhile True :\n\t#Read your temperature sensor to execute temperature compensation\n\ttemperature = 25\n\t#Set the IIC address\n\tads1115.setAddr_ADS1115(0x48)\n\t#Sets the gain and input voltage range.\n\tads1115.setGain(ADS1115_REG_CONFIG_PGA_6_144V)",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_read",
        "documentation": {}
    },
    {
        "label": "\ttemperature",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_read",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_read",
        "peekOfCode": "\ttemperature = 25\n\t#Set the IIC address\n\tads1115.setAddr_ADS1115(0x48)\n\t#Sets the gain and input voltage range.\n\tads1115.setGain(ADS1115_REG_CONFIG_PGA_6_144V)\n\t#Get the Digital Value of Analog of selected channel\n\tadc0 = ads1115.readVoltage(0)\n\t#Convert voltage to PH with temperature compensation\n\tPH = ph.read_PH(adc0['r'],temperature)\n\tprint \"Temperature:%.1f ^C PH:%.2f\" %(temperature,PH)",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_read",
        "documentation": {}
    },
    {
        "label": "\tadc0",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_read",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_read",
        "peekOfCode": "\tadc0 = ads1115.readVoltage(0)\n\t#Convert voltage to PH with temperature compensation\n\tPH = ph.read_PH(adc0['r'],temperature)\n\tprint \"Temperature:%.1f ^C PH:%.2f\" %(temperature,PH)\n\ttime.sleep(1.0)",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_read",
        "documentation": {}
    },
    {
        "label": "\tPH",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_read",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_read",
        "peekOfCode": "\tPH = ph.read_PH(adc0['r'],temperature)\n\tprint \"Temperature:%.1f ^C PH:%.2f\" %(temperature,PH)\n\ttime.sleep(1.0)",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_read",
        "documentation": {}
    },
    {
        "label": "ph",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_reset",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_reset",
        "peekOfCode": "ph = DFRobot_PH()\nph.reset()\ntime.sleep(0.5)\nsys.exit(1)",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.example.demo_PH_reset",
        "documentation": {}
    },
    {
        "label": "ADS1115",
        "kind": 6,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "peekOfCode": "class ADS1115():\n\tdef setGain(self,gain):\n\t\tglobal mygain\n\t\tglobal coefficient\n\t\tmygain=gain\n\t\tif mygain == ADS1115_REG_CONFIG_PGA_6_144V:\n\t\t\tcoefficient = 0.1875\n\t\telif mygain == ADS1115_REG_CONFIG_PGA_4_096V:\n\t\t\tcoefficient = 0.125\n\t\telif mygain == ADS1115_REG_CONFIG_PGA_2_048V:",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "documentation": {}
    },
    {
        "label": "bus",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "peekOfCode": "bus = smbus.SMBus(1)\n# I2C address of the device\nADS1115_IIC_ADDRESS0\t\t\t\t= 0x48\nADS1115_IIC_ADDRESS1\t\t\t\t= 0x49\n# ADS1115 Register Map\nADS1115_REG_POINTER_CONVERT\t\t\t= 0x00 # Conversion register\nADS1115_REG_POINTER_CONFIG\t\t\t= 0x01 # Configuration register\nADS1115_REG_POINTER_LOWTHRESH\t\t= 0x02 # Lo_thresh register\nADS1115_REG_POINTER_HITHRESH\t\t= 0x03 # Hi_thresh register\n# ADS1115 Configuration Register",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "documentation": {}
    },
    {
        "label": "\t\t\tcoefficient",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "peekOfCode": "\t\t\tcoefficient = 0.1875\n\t\telif mygain == ADS1115_REG_CONFIG_PGA_4_096V:\n\t\t\tcoefficient = 0.125\n\t\telif mygain == ADS1115_REG_CONFIG_PGA_2_048V:\n\t\t\tcoefficient = 0.0625\n\t\telif mygain == ADS1115_REG_CONFIG_PGA_1_024V:\n\t\t\tcoefficient = 0.03125\n\t\telif mygain == ADS1115_REG_CONFIG_PGA_0_512V:\n\t\t\tcoefficient = 0.015625\n\t\telif  mygain == ADS1115_REG_CONFIG_PGA_0_256V:",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "documentation": {}
    },
    {
        "label": "\t\t\tcoefficient",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "peekOfCode": "\t\t\tcoefficient = 0.125\n\t\telif mygain == ADS1115_REG_CONFIG_PGA_2_048V:\n\t\t\tcoefficient = 0.0625\n\t\telif mygain == ADS1115_REG_CONFIG_PGA_1_024V:\n\t\t\tcoefficient = 0.03125\n\t\telif mygain == ADS1115_REG_CONFIG_PGA_0_512V:\n\t\t\tcoefficient = 0.015625\n\t\telif  mygain == ADS1115_REG_CONFIG_PGA_0_256V:\n\t\t\tcoefficient = 0.0078125\n\t\telse:",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "documentation": {}
    },
    {
        "label": "\t\t\tcoefficient",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "peekOfCode": "\t\t\tcoefficient = 0.0625\n\t\telif mygain == ADS1115_REG_CONFIG_PGA_1_024V:\n\t\t\tcoefficient = 0.03125\n\t\telif mygain == ADS1115_REG_CONFIG_PGA_0_512V:\n\t\t\tcoefficient = 0.015625\n\t\telif  mygain == ADS1115_REG_CONFIG_PGA_0_256V:\n\t\t\tcoefficient = 0.0078125\n\t\telse:\n\t\t\tcoefficient = 0.125\n\tdef setAddr_ADS1115(self,addr):",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "documentation": {}
    },
    {
        "label": "\t\t\tcoefficient",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "peekOfCode": "\t\t\tcoefficient = 0.03125\n\t\telif mygain == ADS1115_REG_CONFIG_PGA_0_512V:\n\t\t\tcoefficient = 0.015625\n\t\telif  mygain == ADS1115_REG_CONFIG_PGA_0_256V:\n\t\t\tcoefficient = 0.0078125\n\t\telse:\n\t\t\tcoefficient = 0.125\n\tdef setAddr_ADS1115(self,addr):\n\t\tglobal addr_G\n\t\taddr_G=addr",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "documentation": {}
    },
    {
        "label": "\t\t\tcoefficient",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "peekOfCode": "\t\t\tcoefficient = 0.015625\n\t\telif  mygain == ADS1115_REG_CONFIG_PGA_0_256V:\n\t\t\tcoefficient = 0.0078125\n\t\telse:\n\t\t\tcoefficient = 0.125\n\tdef setAddr_ADS1115(self,addr):\n\t\tglobal addr_G\n\t\taddr_G=addr\n\tdef setChannel(self,channel):\n\t\tglobal mygain",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "documentation": {}
    },
    {
        "label": "\t\t\tcoefficient",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "peekOfCode": "\t\t\tcoefficient = 0.0078125\n\t\telse:\n\t\t\tcoefficient = 0.125\n\tdef setAddr_ADS1115(self,addr):\n\t\tglobal addr_G\n\t\taddr_G=addr\n\tdef setChannel(self,channel):\n\t\tglobal mygain\n\t\t\"\"\"Select the Channel user want to use from 0-3\n\t\tFor Single-ended Output",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "documentation": {}
    },
    {
        "label": "\t\t\tcoefficient",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "peekOfCode": "\t\t\tcoefficient = 0.125\n\tdef setAddr_ADS1115(self,addr):\n\t\tglobal addr_G\n\t\taddr_G=addr\n\tdef setChannel(self,channel):\n\t\tglobal mygain\n\t\t\"\"\"Select the Channel user want to use from 0-3\n\t\tFor Single-ended Output\n\t\t0 : AINP = AIN0 and AINN = GND\n\t\t1 : AINP = AIN1 and AINN = GND",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "documentation": {}
    },
    {
        "label": "\t\tself.channel",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "peekOfCode": "\t\tself.channel = channel\n\t\twhile self.channel > 3 :\n\t\t\tself.channel = 0\n\t\treturn self.channel\n\tdef setSingle(self):\n\t\tglobal addr_G\n\t\tif self.channel == 0:\n\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_SINGLE_0 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]\n\t\telif self.channel == 1:\n\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_SINGLE_1 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.channel",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "peekOfCode": "\t\t\tself.channel = 0\n\t\treturn self.channel\n\tdef setSingle(self):\n\t\tglobal addr_G\n\t\tif self.channel == 0:\n\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_SINGLE_0 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]\n\t\telif self.channel == 1:\n\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_SINGLE_1 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]\n\t\telif self.channel == 2:\n\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_SINGLE_2 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "documentation": {}
    },
    {
        "label": "\t\t\tCONFIG_REG",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "peekOfCode": "\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_SINGLE_0 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]\n\t\telif self.channel == 1:\n\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_SINGLE_1 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]\n\t\telif self.channel == 2:\n\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_SINGLE_2 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]\n\t\telif self.channel == 3:\n\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_SINGLE_3 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]\n\t\tbus.write_i2c_block_data(addr_G, ADS1115_REG_POINTER_CONFIG, CONFIG_REG)\n\tdef setDifferential(self):\n\t\tglobal addr_G",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "documentation": {}
    },
    {
        "label": "\t\t\tCONFIG_REG",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "peekOfCode": "\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_SINGLE_1 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]\n\t\telif self.channel == 2:\n\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_SINGLE_2 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]\n\t\telif self.channel == 3:\n\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_SINGLE_3 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]\n\t\tbus.write_i2c_block_data(addr_G, ADS1115_REG_POINTER_CONFIG, CONFIG_REG)\n\tdef setDifferential(self):\n\t\tglobal addr_G\n\t\tif self.channel == 0:\n\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_DIFF_0_1 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "documentation": {}
    },
    {
        "label": "\t\t\tCONFIG_REG",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "peekOfCode": "\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_SINGLE_2 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]\n\t\telif self.channel == 3:\n\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_SINGLE_3 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]\n\t\tbus.write_i2c_block_data(addr_G, ADS1115_REG_POINTER_CONFIG, CONFIG_REG)\n\tdef setDifferential(self):\n\t\tglobal addr_G\n\t\tif self.channel == 0:\n\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_DIFF_0_1 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]\n\t\telif self.channel == 1:\n\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_DIFF_0_3 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "documentation": {}
    },
    {
        "label": "\t\t\tCONFIG_REG",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "peekOfCode": "\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_SINGLE_3 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]\n\t\tbus.write_i2c_block_data(addr_G, ADS1115_REG_POINTER_CONFIG, CONFIG_REG)\n\tdef setDifferential(self):\n\t\tglobal addr_G\n\t\tif self.channel == 0:\n\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_DIFF_0_1 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]\n\t\telif self.channel == 1:\n\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_DIFF_0_3 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]\n\t\telif self.channel == 2:\n\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_DIFF_1_3 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "documentation": {}
    },
    {
        "label": "\t\t\tCONFIG_REG",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "peekOfCode": "\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_DIFF_0_1 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]\n\t\telif self.channel == 1:\n\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_DIFF_0_3 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]\n\t\telif self.channel == 2:\n\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_DIFF_1_3 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]\n\t\telif self.channel == 3:\n\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_DIFF_2_3 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]\n\t\tbus.write_i2c_block_data(addr_G, ADS1115_REG_POINTER_CONFIG, CONFIG_REG)\n\tdef readValue(self):\n\t\t\"\"\"Read data back from ADS1115_REG_POINTER_CONVERT(0x00), 2 bytes",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "documentation": {}
    },
    {
        "label": "\t\t\tCONFIG_REG",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "peekOfCode": "\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_DIFF_0_3 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]\n\t\telif self.channel == 2:\n\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_DIFF_1_3 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]\n\t\telif self.channel == 3:\n\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_DIFF_2_3 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]\n\t\tbus.write_i2c_block_data(addr_G, ADS1115_REG_POINTER_CONFIG, CONFIG_REG)\n\tdef readValue(self):\n\t\t\"\"\"Read data back from ADS1115_REG_POINTER_CONVERT(0x00), 2 bytes\n\t\traw_adc MSB, raw_adc LSB\"\"\"\n\t\tglobal coefficient",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "documentation": {}
    },
    {
        "label": "\t\t\tCONFIG_REG",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "peekOfCode": "\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_DIFF_1_3 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]\n\t\telif self.channel == 3:\n\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_DIFF_2_3 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]\n\t\tbus.write_i2c_block_data(addr_G, ADS1115_REG_POINTER_CONFIG, CONFIG_REG)\n\tdef readValue(self):\n\t\t\"\"\"Read data back from ADS1115_REG_POINTER_CONVERT(0x00), 2 bytes\n\t\traw_adc MSB, raw_adc LSB\"\"\"\n\t\tglobal coefficient\n\t\tglobal addr_G\n\t\tdata = bus.read_i2c_block_data(addr_G, ADS1115_REG_POINTER_CONVERT, 2)",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "documentation": {}
    },
    {
        "label": "\t\t\tCONFIG_REG",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "peekOfCode": "\t\t\tCONFIG_REG = [ADS1115_REG_CONFIG_OS_SINGLE | ADS1115_REG_CONFIG_MUX_DIFF_2_3 | mygain | ADS1115_REG_CONFIG_MODE_CONTIN, ADS1115_REG_CONFIG_DR_128SPS | ADS1115_REG_CONFIG_CQUE_NONE]\n\t\tbus.write_i2c_block_data(addr_G, ADS1115_REG_POINTER_CONFIG, CONFIG_REG)\n\tdef readValue(self):\n\t\t\"\"\"Read data back from ADS1115_REG_POINTER_CONVERT(0x00), 2 bytes\n\t\traw_adc MSB, raw_adc LSB\"\"\"\n\t\tglobal coefficient\n\t\tglobal addr_G\n\t\tdata = bus.read_i2c_block_data(addr_G, ADS1115_REG_POINTER_CONVERT, 2)\n\t\t# Convert the data\n\t\traw_adc = data[0] * 256 + data[1]",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "peekOfCode": "\t\tdata = bus.read_i2c_block_data(addr_G, ADS1115_REG_POINTER_CONVERT, 2)\n\t\t# Convert the data\n\t\traw_adc = data[0] * 256 + data[1]\n\t\tif raw_adc > 32767:\n\t\t\traw_adc -= 65535\n\t\traw_adc = int(float(raw_adc)*coefficient)\n\t\treturn {'r' : raw_adc}\n\tdef readVoltage(self,channel):\n\t\tself.setChannel(channel)\n\t\tself.setSingle()",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "documentation": {}
    },
    {
        "label": "\t\traw_adc",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "peekOfCode": "\t\traw_adc = data[0] * 256 + data[1]\n\t\tif raw_adc > 32767:\n\t\t\traw_adc -= 65535\n\t\traw_adc = int(float(raw_adc)*coefficient)\n\t\treturn {'r' : raw_adc}\n\tdef readVoltage(self,channel):\n\t\tself.setChannel(channel)\n\t\tself.setSingle()\n\t\ttime.sleep(0.1)\n\t\treturn self.readValue()",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "documentation": {}
    },
    {
        "label": "\t\traw_adc",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "peekOfCode": "\t\traw_adc = int(float(raw_adc)*coefficient)\n\t\treturn {'r' : raw_adc}\n\tdef readVoltage(self,channel):\n\t\tself.setChannel(channel)\n\t\tself.setSingle()\n\t\ttime.sleep(0.1)\n\t\treturn self.readValue()\n\tdef ComparatorVoltage(self,channel):\n\t\tself.setChannel(channel)\n\t\tself.setDifferential()",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_ADS1115",
        "documentation": {}
    },
    {
        "label": "DFRobot_EC",
        "kind": 6,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "peekOfCode": "class DFRobot_EC():\n\tdef begin(self):\n\t\tglobal _kvalueLow\n\t\tglobal _kvalueHigh\n\t\ttry:\n\t\t\twith open('ecdata.txt','r') as f:\n\t\t\t\tkvalueLowLine  = f.readline()\n\t\t\t\tkvalueLowLine  = kvalueLowLine.strip('kvalueLow=')\n\t\t\t\t_kvalueLow     = float(kvalueLowLine)\n\t\t\t\tkvalueHighLine = f.readline()",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "documentation": {}
    },
    {
        "label": "_cmdReceivedBufferIndex",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "peekOfCode": "_cmdReceivedBufferIndex = 0\n_voltage                = 0.0\n_temperature            = 25.0\nclass DFRobot_EC():\n\tdef begin(self):\n\t\tglobal _kvalueLow\n\t\tglobal _kvalueHigh\n\t\ttry:\n\t\t\twith open('ecdata.txt','r') as f:\n\t\t\t\tkvalueLowLine  = f.readline()",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tkvalueHighLine",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "peekOfCode": "\t\t\t\tkvalueHighLine = f.readline()\n\t\t\t\tkvalueHighLine = kvalueHighLine.strip('kvalueHigh=')\n\t\t\t\t_kvalueHigh    = float(kvalueHighLine)\n\t\texcept :\n\t\t\tprint \"ecdata.txt ERROR ! Please run DFRobot_EC_Reset\"\n\t\t\tsys.exit(1)\n\tdef readEC(self,voltage,temperature):\n\t\tglobal _kvalueLow\n\t\tglobal _kvalueHigh\n\t\tglobal _kvalue",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tkvalueHighLine",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "peekOfCode": "\t\t\t\tkvalueHighLine = kvalueHighLine.strip('kvalueHigh=')\n\t\t\t\t_kvalueHigh    = float(kvalueHighLine)\n\t\texcept :\n\t\t\tprint \"ecdata.txt ERROR ! Please run DFRobot_EC_Reset\"\n\t\t\tsys.exit(1)\n\tdef readEC(self,voltage,temperature):\n\t\tglobal _kvalueLow\n\t\tglobal _kvalueHigh\n\t\tglobal _kvalue\n\t\trawEC = 1000*voltage/820.0/200.0",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "documentation": {}
    },
    {
        "label": "\t\trawEC",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "peekOfCode": "\t\trawEC = 1000*voltage/820.0/200.0\n\t\tvalueTemp = rawEC * _kvalue\n\t\tif(valueTemp > 2.5):\n\t\t\t_kvalue = _kvalueHigh\n\t\telif(valueTemp < 2.0):\n\t\t\t_kvalue = _kvalueLow\n\t\tvalue = rawEC * _kvalue\n\t\tvalue = value / (1.0+0.0185*(temperature-25.0))\n\t\treturn value\n\tdef calibration(self,voltage,temperature):",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "documentation": {}
    },
    {
        "label": "\t\tvalueTemp",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "peekOfCode": "\t\tvalueTemp = rawEC * _kvalue\n\t\tif(valueTemp > 2.5):\n\t\t\t_kvalue = _kvalueHigh\n\t\telif(valueTemp < 2.0):\n\t\t\t_kvalue = _kvalueLow\n\t\tvalue = rawEC * _kvalue\n\t\tvalue = value / (1.0+0.0185*(temperature-25.0))\n\t\treturn value\n\tdef calibration(self,voltage,temperature):\n\t\trawEC = 1000*voltage/820.0/200.0",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "documentation": {}
    },
    {
        "label": "\t\t\t_kvalue",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "peekOfCode": "\t\t\t_kvalue = _kvalueHigh\n\t\telif(valueTemp < 2.0):\n\t\t\t_kvalue = _kvalueLow\n\t\tvalue = rawEC * _kvalue\n\t\tvalue = value / (1.0+0.0185*(temperature-25.0))\n\t\treturn value\n\tdef calibration(self,voltage,temperature):\n\t\trawEC = 1000*voltage/820.0/200.0\n\t\tif (rawEC>0.9 and rawEC<1.9):\n\t\t\tcompECsolution = 1.413*(1.0+0.0185*(temperature-25.0))",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "documentation": {}
    },
    {
        "label": "\t\t\t_kvalue",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "peekOfCode": "\t\t\t_kvalue = _kvalueLow\n\t\tvalue = rawEC * _kvalue\n\t\tvalue = value / (1.0+0.0185*(temperature-25.0))\n\t\treturn value\n\tdef calibration(self,voltage,temperature):\n\t\trawEC = 1000*voltage/820.0/200.0\n\t\tif (rawEC>0.9 and rawEC<1.9):\n\t\t\tcompECsolution = 1.413*(1.0+0.0185*(temperature-25.0))\n\t\t\tKValueTemp = 820.0*200.0*compECsolution/1000.0/voltage\n\t\t\tround(KValueTemp,2)",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "documentation": {}
    },
    {
        "label": "\t\tvalue",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "peekOfCode": "\t\tvalue = rawEC * _kvalue\n\t\tvalue = value / (1.0+0.0185*(temperature-25.0))\n\t\treturn value\n\tdef calibration(self,voltage,temperature):\n\t\trawEC = 1000*voltage/820.0/200.0\n\t\tif (rawEC>0.9 and rawEC<1.9):\n\t\t\tcompECsolution = 1.413*(1.0+0.0185*(temperature-25.0))\n\t\t\tKValueTemp = 820.0*200.0*compECsolution/1000.0/voltage\n\t\t\tround(KValueTemp,2)\n\t\t\tprint \">>>Buffer Solution:1.413us/cm\"",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "documentation": {}
    },
    {
        "label": "\t\tvalue",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "peekOfCode": "\t\tvalue = value / (1.0+0.0185*(temperature-25.0))\n\t\treturn value\n\tdef calibration(self,voltage,temperature):\n\t\trawEC = 1000*voltage/820.0/200.0\n\t\tif (rawEC>0.9 and rawEC<1.9):\n\t\t\tcompECsolution = 1.413*(1.0+0.0185*(temperature-25.0))\n\t\t\tKValueTemp = 820.0*200.0*compECsolution/1000.0/voltage\n\t\t\tround(KValueTemp,2)\n\t\t\tprint \">>>Buffer Solution:1.413us/cm\"\n\t\t\tf=open('ecdata.txt','r+')",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "documentation": {}
    },
    {
        "label": "\t\trawEC",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "peekOfCode": "\t\trawEC = 1000*voltage/820.0/200.0\n\t\tif (rawEC>0.9 and rawEC<1.9):\n\t\t\tcompECsolution = 1.413*(1.0+0.0185*(temperature-25.0))\n\t\t\tKValueTemp = 820.0*200.0*compECsolution/1000.0/voltage\n\t\t\tround(KValueTemp,2)\n\t\t\tprint \">>>Buffer Solution:1.413us/cm\"\n\t\t\tf=open('ecdata.txt','r+')\n\t\t\tflist=f.readlines()\n\t\t\tflist[0]='kvalueLow='+ str(KValueTemp) + '\\n'\n\t\t\tf=open('ecdata.txt','w+')",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "documentation": {}
    },
    {
        "label": "\t\t\tcompECsolution",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "peekOfCode": "\t\t\tcompECsolution = 1.413*(1.0+0.0185*(temperature-25.0))\n\t\t\tKValueTemp = 820.0*200.0*compECsolution/1000.0/voltage\n\t\t\tround(KValueTemp,2)\n\t\t\tprint \">>>Buffer Solution:1.413us/cm\"\n\t\t\tf=open('ecdata.txt','r+')\n\t\t\tflist=f.readlines()\n\t\t\tflist[0]='kvalueLow='+ str(KValueTemp) + '\\n'\n\t\t\tf=open('ecdata.txt','w+')\n\t\t\tf.writelines(flist)\n\t\t\tf.close()",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "documentation": {}
    },
    {
        "label": "\t\t\tKValueTemp",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "peekOfCode": "\t\t\tKValueTemp = 820.0*200.0*compECsolution/1000.0/voltage\n\t\t\tround(KValueTemp,2)\n\t\t\tprint \">>>Buffer Solution:1.413us/cm\"\n\t\t\tf=open('ecdata.txt','r+')\n\t\t\tflist=f.readlines()\n\t\t\tflist[0]='kvalueLow='+ str(KValueTemp) + '\\n'\n\t\t\tf=open('ecdata.txt','w+')\n\t\t\tf.writelines(flist)\n\t\t\tf.close()\n\t\t\tprint \">>>EC:1.413us/cm Calibration completed,Please enter Ctrl+C exit calibration in 5 seconds\"",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "documentation": {}
    },
    {
        "label": "\t\t\tcompECsolution",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "peekOfCode": "\t\t\tcompECsolution = 12.88*(1.0+0.0185*(temperature-25.0))\n\t\t\tKValueTemp = 820.0*200.0*compECsolution/1000.0/voltage\n\t\t\tprint \">>>Buffer Solution:12.88ms/cm\"\n\t\t\tf=open('ecdata.txt','r+')\n\t\t\tflist=f.readlines()\n\t\t\tflist[1]='kvalueHigh='+ str(KValueTemp) + '\\n'\n\t\t\tf=open('ecdata.txt','w+')\n\t\t\tf.writelines(flist)\n\t\t\tf.close()\n\t\t\tprint \">>>EC:12.88ms/cm Calibration completed,Please enter Ctrl+C exit calibration in 5 seconds\"",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "documentation": {}
    },
    {
        "label": "\t\t\tKValueTemp",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "peekOfCode": "\t\t\tKValueTemp = 820.0*200.0*compECsolution/1000.0/voltage\n\t\t\tprint \">>>Buffer Solution:12.88ms/cm\"\n\t\t\tf=open('ecdata.txt','r+')\n\t\t\tflist=f.readlines()\n\t\t\tflist[1]='kvalueHigh='+ str(KValueTemp) + '\\n'\n\t\t\tf=open('ecdata.txt','w+')\n\t\t\tf.writelines(flist)\n\t\t\tf.close()\n\t\t\tprint \">>>EC:12.88ms/cm Calibration completed,Please enter Ctrl+C exit calibration in 5 seconds\"\n\t\t\ttime.sleep(5.0)",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_EC",
        "documentation": {}
    },
    {
        "label": "DFRobot_PH",
        "kind": 6,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_PH",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_PH",
        "peekOfCode": "class DFRobot_PH():\n\tdef begin(self):\n\t\t'''!\n          @brief   Initialization The Analog pH Sensor.\n        '''\n\t\tglobal _acidVoltage\n\t\tglobal _neutralVoltage\n\t\ttry:\n\t\t\twith open('phdata.txt','r') as f:\n\t\t\t\tneutralVoltageLine = f.readline()",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_PH",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tneutralVoltageLine",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_PH",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_PH",
        "peekOfCode": "\t\t\t\tneutralVoltageLine = f.readline()\n\t\t\t\tneutralVoltageLine = neutralVoltageLine.strip('neutralVoltage=')\n\t\t\t\t_neutralVoltage    = float(neutralVoltageLine)\n\t\t\t\tacidVoltageLine    = f.readline()\n\t\t\t\tacidVoltageLine    = acidVoltageLine.strip('acidVoltage=')\n\t\t\t\t_acidVoltage       = float(acidVoltageLine)\n\t\texcept :\n\t\t\tprint \"phdata.txt ERROR ! Please run DFRobot_PH_Reset\"\n\t\t\tsys.exit(1)\n\tdef read_PH(self,voltage,temperature):",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_PH",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tneutralVoltageLine",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_PH",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_PH",
        "peekOfCode": "\t\t\t\tneutralVoltageLine = neutralVoltageLine.strip('neutralVoltage=')\n\t\t\t\t_neutralVoltage    = float(neutralVoltageLine)\n\t\t\t\tacidVoltageLine    = f.readline()\n\t\t\t\tacidVoltageLine    = acidVoltageLine.strip('acidVoltage=')\n\t\t\t\t_acidVoltage       = float(acidVoltageLine)\n\t\texcept :\n\t\t\tprint \"phdata.txt ERROR ! Please run DFRobot_PH_Reset\"\n\t\t\tsys.exit(1)\n\tdef read_PH(self,voltage,temperature):\n\t\t'''!",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_PH",
        "documentation": {}
    },
    {
        "label": "\t\tintercept",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_PH",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_PH",
        "peekOfCode": "\t\tintercept = 7.0 - slope*(_neutralVoltage-1500.0)/3.0\n\t\t_phValue  = slope*(voltage-1500.0)/3.0+intercept\n\t\tround(_phValue,2)\n\t\treturn _phValue\n\tdef calibration(self,voltage):\n\t\t'''!\n          @brief   Calibrate the calibration data.\n          @param voltage       Voltage value\n        '''\n\t\tif (voltage>1322 and voltage<1678):",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_PH",
        "documentation": {}
    },
    {
        "label": "\t\t_neutralVoltage",
        "kind": 5,
        "importPath": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_PH",
        "description": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_PH",
        "peekOfCode": "\t\t_neutralVoltage = 1500.0\n\t\ttry:\n\t\t\tf=open('phdata.txt','r+')\n\t\t\tflist=f.readlines()\n\t\t\tflist[0]='neutralVoltage='+ str(_neutralVoltage) + '\\n'\n\t\t\tflist[1]='acidVoltage='+ str(_acidVoltage) + '\\n'\n\t\t\tf=open('phdata.txt','w+')\n\t\t\tf.writelines(flist)\n\t\t\tf.close()\n\t\t\tprint \">>>Reset to default parameters<<<\"",
        "detail": "libraries.DFRobot_PH-master.python.raspberrypi.DFRobot_PH",
        "documentation": {}
    },
    {
        "label": "_IncludeState",
        "kind": 6,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "class _IncludeState(object):\n  \"\"\"Tracks line numbers for includes, and the order in which includes appear.\n  include_list contains list of lists of (header, line number) pairs.\n  It's a lists of lists rather than just one flat list to make it\n  easier to update across preprocessor boundaries.\n  Call CheckNextIncludeOrder() once for each header in the file, passing\n  in the type constants defined above. Calls in an illegal order will\n  raise an _IncludeError with an appropriate error message.\n  \"\"\"\n  # self._section will move monotonically through this set. If it ever",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_CppLintState",
        "kind": 6,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "class _CppLintState(object):\n  \"\"\"Maintains module-wide state..\"\"\"\n  def __init__(self):\n    self.verbose_level = 1  # global setting.\n    self.error_count = 0    # global count of reported errors\n    # filters to apply when emitting error messages\n    self.filters = _DEFAULT_FILTERS[:]\n    # backup of filter list. Used to restore the state after each file.\n    self._filters_backup = self.filters[:]\n    self.counting = 'total'  # In what way are we counting errors?",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_FunctionState",
        "kind": 6,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "class _FunctionState(object):\n  \"\"\"Tracks current function name and the number of lines in its body.\"\"\"\n  _NORMAL_TRIGGER = 250  # for --v=0, 500 for --v=1, etc.\n  _TEST_TRIGGER = 400    # about 50% more than _NORMAL_TRIGGER.\n  def __init__(self):\n    self.in_a_function = False\n    self.lines_in_function = 0\n    self.current_function = ''\n  def Begin(self, function_name):\n    \"\"\"Start analyzing function body.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_IncludeError",
        "kind": 6,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "class _IncludeError(Exception):\n  \"\"\"Indicates a problem with the include order in a file.\"\"\"\n  pass\nclass FileInfo(object):\n  \"\"\"Provides utility functions for filenames.\n  FileInfo provides easy access to the components of a file's path\n  relative to the project root.\n  \"\"\"\n  def __init__(self, filename):\n    self._filename = filename",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "FileInfo",
        "kind": 6,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "class FileInfo(object):\n  \"\"\"Provides utility functions for filenames.\n  FileInfo provides easy access to the components of a file's path\n  relative to the project root.\n  \"\"\"\n  def __init__(self, filename):\n    self._filename = filename\n  def FullName(self):\n    \"\"\"Make Windows paths like Unix.\"\"\"\n    return os.path.abspath(self._filename).replace('\\\\', '/')",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CleansedLines",
        "kind": 6,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "class CleansedLines(object):\n  \"\"\"Holds 4 copies of all lines with different preprocessing applied to them.\n  1) elided member contains lines without strings and comments.\n  2) lines member contains lines without comments.\n  3) raw_lines member contains all the lines without processing.\n  4) lines_without_raw_strings member is same as raw_lines, but with C++11 raw\n     strings removed.\n  All these members are of <type 'list'>, and of the same length.\n  \"\"\"\n  def __init__(self, lines):",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_BlockInfo",
        "kind": 6,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "class _BlockInfo(object):\n  \"\"\"Stores information about a generic block of code.\"\"\"\n  def __init__(self, linenum, seen_open_brace):\n    self.starting_linenum = linenum\n    self.seen_open_brace = seen_open_brace\n    self.open_parentheses = 0\n    self.inline_asm = _NO_ASM\n    self.check_namespace_indentation = False\n  def CheckBegin(self, filename, clean_lines, linenum, error):\n    \"\"\"Run checks that applies to text up to the opening brace.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_ExternCInfo",
        "kind": 6,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "class _ExternCInfo(_BlockInfo):\n  \"\"\"Stores information about an 'extern \"C\"' block.\"\"\"\n  def __init__(self, linenum):\n    _BlockInfo.__init__(self, linenum, True)\nclass _ClassInfo(_BlockInfo):\n  \"\"\"Stores information about a class.\"\"\"\n  def __init__(self, name, class_or_struct, clean_lines, linenum):\n    _BlockInfo.__init__(self, linenum, False)\n    self.name = name\n    self.is_derived = False",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_ClassInfo",
        "kind": 6,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "class _ClassInfo(_BlockInfo):\n  \"\"\"Stores information about a class.\"\"\"\n  def __init__(self, name, class_or_struct, clean_lines, linenum):\n    _BlockInfo.__init__(self, linenum, False)\n    self.name = name\n    self.is_derived = False\n    self.check_namespace_indentation = True\n    if class_or_struct == 'struct':\n      self.access = 'public'\n      self.is_struct = True",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_NamespaceInfo",
        "kind": 6,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "class _NamespaceInfo(_BlockInfo):\n  \"\"\"Stores information about a namespace.\"\"\"\n  def __init__(self, name, linenum):\n    _BlockInfo.__init__(self, linenum, False)\n    self.name = name or ''\n    self.check_namespace_indentation = True\n  def CheckEnd(self, filename, clean_lines, linenum, error):\n    \"\"\"Check end of namespace comments.\"\"\"\n    line = clean_lines.raw_lines[linenum]\n    # Check how many lines is enclosed in this namespace.  Don't issue",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_PreprocessorInfo",
        "kind": 6,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "class _PreprocessorInfo(object):\n  \"\"\"Stores checkpoints of nesting stacks when #if/#else is seen.\"\"\"\n  def __init__(self, stack_before_if):\n    # The entire nesting stack before #if\n    self.stack_before_if = stack_before_if\n    # The entire nesting stack up to #else\n    self.stack_before_else = []\n    # Whether we have already seen #else or #elif\n    self.seen_else = False\nclass NestingState(object):",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "NestingState",
        "kind": 6,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "class NestingState(object):\n  \"\"\"Holds states related to parsing braces.\"\"\"\n  def __init__(self):\n    # Stack for tracking all braces.  An object is pushed whenever we\n    # see a \"{\", and popped when we see a \"}\".  Only 3 types of\n    # objects are possible:\n    # - _ClassInfo: a class or struct.\n    # - _NamespaceInfo: a namespace.\n    # - _BlockInfo: some other type of block.\n    self.stack = []",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "ProcessHppHeadersOption",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def ProcessHppHeadersOption(val):\n  global _hpp_headers\n  try:\n    _hpp_headers = set(val.split(','))\n    # Automatically append to extensions list so it does not have to be set 2 times\n    _valid_extensions.update(_hpp_headers)\n  except ValueError:\n    PrintUsage('Header extensions must be comma separated list.')\ndef IsHeaderExtension(file_extension):\n  return file_extension in _hpp_headers",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "IsHeaderExtension",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def IsHeaderExtension(file_extension):\n  return file_extension in _hpp_headers\ndef ParseNolintSuppressions(filename, raw_line, linenum, error):\n  \"\"\"Updates the global list of line error-suppressions.\n  Parses any NOLINT comments on the current line, updating the global\n  error_suppressions store.  Reports an error if the NOLINT comment\n  was malformed.\n  Args:\n    filename: str, the name of the input file.\n    raw_line: str, the line of input text, with comments.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "ParseNolintSuppressions",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def ParseNolintSuppressions(filename, raw_line, linenum, error):\n  \"\"\"Updates the global list of line error-suppressions.\n  Parses any NOLINT comments on the current line, updating the global\n  error_suppressions store.  Reports an error if the NOLINT comment\n  was malformed.\n  Args:\n    filename: str, the name of the input file.\n    raw_line: str, the line of input text, with comments.\n    linenum: int, the number of the current line.\n    error: function, an error handler.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "ProcessGlobalSuppresions",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def ProcessGlobalSuppresions(lines):\n  \"\"\"Updates the list of global error suppressions.\n  Parses any lint directives in the file that have global effect.\n  Args:\n    lines: An array of strings, each representing a line of the file, with the\n           last element being empty if the file is terminated with a newline.\n  \"\"\"\n  for line in lines:\n    if _SEARCH_C_FILE.search(line):\n      for category in _DEFAULT_C_SUPPRESSED_CATEGORIES:",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "ResetNolintSuppressions",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def ResetNolintSuppressions():\n  \"\"\"Resets the set of NOLINT suppressions to empty.\"\"\"\n  _error_suppressions.clear()\n  _global_error_suppressions.clear()\ndef IsErrorSuppressedByNolint(category, linenum):\n  \"\"\"Returns true if the specified error category is suppressed on this line.\n  Consults the global error_suppressions map populated by\n  ParseNolintSuppressions/ProcessGlobalSuppresions/ResetNolintSuppressions.\n  Args:\n    category: str, the category of the error.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "IsErrorSuppressedByNolint",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def IsErrorSuppressedByNolint(category, linenum):\n  \"\"\"Returns true if the specified error category is suppressed on this line.\n  Consults the global error_suppressions map populated by\n  ParseNolintSuppressions/ProcessGlobalSuppresions/ResetNolintSuppressions.\n  Args:\n    category: str, the category of the error.\n    linenum: int, the current line number.\n  Returns:\n    bool, True iff the error should be suppressed due to a NOLINT comment or\n    global suppression.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "Match",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def Match(pattern, s):\n  \"\"\"Matches the string with the pattern, caching the compiled regexp.\"\"\"\n  # The regexp compilation caching is inlined in both Match and Search for\n  # performance reasons; factoring it out into a separate function turns out\n  # to be noticeably expensive.\n  if pattern not in _regexp_compile_cache:\n    _regexp_compile_cache[pattern] = sre_compile.compile(pattern)\n  return _regexp_compile_cache[pattern].match(s)\ndef ReplaceAll(pattern, rep, s):\n  \"\"\"Replaces instances of pattern in a string with a replacement.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "ReplaceAll",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def ReplaceAll(pattern, rep, s):\n  \"\"\"Replaces instances of pattern in a string with a replacement.\n  The compiled regex is kept in a cache shared by Match and Search.\n  Args:\n    pattern: regex pattern\n    rep: replacement text\n    s: search string\n  Returns:\n    string with replacements made (or original string if no replacements)\n  \"\"\"",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "Search",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def Search(pattern, s):\n  \"\"\"Searches the string for the pattern, caching the compiled regexp.\"\"\"\n  if pattern not in _regexp_compile_cache:\n    _regexp_compile_cache[pattern] = sre_compile.compile(pattern)\n  return _regexp_compile_cache[pattern].search(s)\ndef _IsSourceExtension(s):\n  \"\"\"File extension (excluding dot) matches a source file extension.\"\"\"\n  return s in ('c', 'cc', 'cpp', 'cxx')\nclass _IncludeState(object):\n  \"\"\"Tracks line numbers for includes, and the order in which includes appear.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "Error",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def Error(filename, linenum, category, confidence, message):\n  \"\"\"Logs the fact we've found a lint error.\n  We log where the error was found, and also our confidence in the error,\n  that is, how certain we are this is a legitimate style regression, and\n  not a misidentification or a use that's sometimes justified.\n  False positives can be suppressed by the use of\n  \"cpplint(category)\"  comments on the offending line.  These are\n  parsed into _error_suppressions.\n  Args:\n    filename: The name of the file containing the error.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "IsCppString",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def IsCppString(line):\n  \"\"\"Does line terminate so, that the next symbol is in string constant.\n  This function does not consider single-line nor multi-line comments.\n  Args:\n    line: is a partial line of code starting from the 0..n.\n  Returns:\n    True, if next character appended to 'line' is inside a\n    string constant.\n  \"\"\"\n  line = line.replace(r'\\\\', 'XX')  # after this, \\\\\" does not match to \\\"",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CleanseRawStrings",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CleanseRawStrings(raw_lines):\n  \"\"\"Removes C++11 raw strings from lines.\n    Before:\n      static const char kData[] = R\"(\n          multi-line string\n          )\";\n    After:\n      static const char kData[] = \"\"\n          (replaced by blank line)\n          \"\";",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "FindNextMultiLineCommentStart",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def FindNextMultiLineCommentStart(lines, lineix):\n  \"\"\"Find the beginning marker for a multiline comment.\"\"\"\n  while lineix < len(lines):\n    if lines[lineix].strip().startswith('/*'):\n      # Only return this marker if the comment goes beyond this line\n      if lines[lineix].strip().find('*/', 2) < 0:\n        return lineix\n    lineix += 1\n  return len(lines)\ndef FindNextMultiLineCommentEnd(lines, lineix):",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "FindNextMultiLineCommentEnd",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def FindNextMultiLineCommentEnd(lines, lineix):\n  \"\"\"We are inside a comment, find the end marker.\"\"\"\n  while lineix < len(lines):\n    if lines[lineix].strip().endswith('*/'):\n      return lineix\n    lineix += 1\n  return len(lines)\ndef RemoveMultiLineCommentsFromRange(lines, begin, end):\n  \"\"\"Clears a range of lines for multi-line comments.\"\"\"\n  # Having // <empty> comments makes the lines non-empty, so we will not get",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "RemoveMultiLineCommentsFromRange",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def RemoveMultiLineCommentsFromRange(lines, begin, end):\n  \"\"\"Clears a range of lines for multi-line comments.\"\"\"\n  # Having // <empty> comments makes the lines non-empty, so we will not get\n  # unnecessary blank line warnings later in the code.\n  for i in range(begin, end):\n    lines[i] = '/**/'\ndef RemoveMultiLineComments(filename, lines, error):\n  \"\"\"Removes multiline (c-style) comments from lines.\"\"\"\n  lineix = 0\n  while lineix < len(lines):",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "RemoveMultiLineComments",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def RemoveMultiLineComments(filename, lines, error):\n  \"\"\"Removes multiline (c-style) comments from lines.\"\"\"\n  lineix = 0\n  while lineix < len(lines):\n    lineix_begin = FindNextMultiLineCommentStart(lines, lineix)\n    if lineix_begin >= len(lines):\n      return\n    lineix_end = FindNextMultiLineCommentEnd(lines, lineix_begin)\n    if lineix_end >= len(lines):\n      error(filename, lineix_begin + 1, 'readability/multiline_comment', 5,",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CleanseComments",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CleanseComments(line):\n  \"\"\"Removes //-comments and single-line C-style /* */ comments.\n  Args:\n    line: A line of C++ source.\n  Returns:\n    The line with single-line comments removed.\n  \"\"\"\n  commentpos = line.find('//')\n  if commentpos != -1 and not IsCppString(line[:commentpos]):\n    line = line[:commentpos].rstrip()",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "FindEndOfExpressionInLine",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def FindEndOfExpressionInLine(line, startpos, stack):\n  \"\"\"Find the position just after the end of current parenthesized expression.\n  Args:\n    line: a CleansedLines line.\n    startpos: start searching at this position.\n    stack: nesting stack at startpos.\n  Returns:\n    On finding matching end: (index just after matching end, None)\n    On finding an unclosed expression: (-1, None)\n    Otherwise: (-1, new stack at end of this line)",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CloseExpression",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CloseExpression(clean_lines, linenum, pos):\n  \"\"\"If input points to ( or { or [ or <, finds the position that closes it.\n  If lines[linenum][pos] points to a '(' or '{' or '[' or '<', finds the\n  linenum/pos that correspond to the closing of the expression.\n  TODO(unknown): cpplint spends a fair bit of time matching parentheses.\n  Ideally we would want to index all opening and closing parentheses once\n  and have CloseExpression be just a simple lookup, but due to preprocessor\n  tricks, this is not so easy.\n  Args:\n    clean_lines: A CleansedLines instance containing the file.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "FindStartOfExpressionInLine",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def FindStartOfExpressionInLine(line, endpos, stack):\n  \"\"\"Find position at the matching start of current expression.\n  This is almost the reverse of FindEndOfExpressionInLine, but note\n  that the input position and returned position differs by 1.\n  Args:\n    line: a CleansedLines line.\n    endpos: start searching at this position.\n    stack: nesting stack at endpos.\n  Returns:\n    On finding matching start: (index at matching start, None)",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "ReverseCloseExpression",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def ReverseCloseExpression(clean_lines, linenum, pos):\n  \"\"\"If input points to ) or } or ] or >, finds the position that opens it.\n  If lines[linenum][pos] points to a ')' or '}' or ']' or '>', finds the\n  linenum/pos that correspond to the opening of the expression.\n  Args:\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    pos: A position on the line.\n  Returns:\n    A tuple (line, linenum, pos) pointer *at* the opening brace, or",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckForCopyright",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckForCopyright(filename, lines, error):\n  \"\"\"Logs an error if no Copyright message appears at the top of the file.\"\"\"\n  # We'll say it should occur by line 10. Don't forget there's a\n  # placeholder line at the front.\n  for line in xrange(1, min(len(lines), 11)):\n    if re.search(r'Copyright', lines[line], re.I): break\n  else:                       # means no copyright line was found\n    error(filename, 0, 'legal/copyright', 5,\n          'No copyright message found.  '\n          'You should have a line: \"Copyright [year] <Copyright Owner>\"')",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "GetIndentLevel",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def GetIndentLevel(line):\n  \"\"\"Return the number of leading spaces in line.\n  Args:\n    line: A string to check.\n  Returns:\n    An integer count of leading spaces, possibly zero.\n  \"\"\"\n  indent = Match(r'^( *)\\S', line)\n  if indent:\n    return len(indent.group(1))",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "PathSplitToList",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def PathSplitToList(path):\n  \"\"\"Returns the path split into a list by the separator.\n  Args:\n    path: An absolute or relative path (e.g. '/a/b/c/' or '../a')\n  Returns:\n    A list of path components (e.g. ['a', 'b', 'c]).\n  \"\"\"\n  lst = []\n  while True:\n    (head, tail) = os.path.split(path)",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "GetHeaderGuardCPPVariable",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def GetHeaderGuardCPPVariable(filename):\n  \"\"\"Returns the CPP variable that should be used as a header guard.\n  Args:\n    filename: The name of a C++ header file.\n  Returns:\n    The CPP variable that should be used as a header guard in the\n    named file.\n  \"\"\"\n  # Restores original filename in case that cpplint is invoked from Emacs's\n  # flymake.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckForHeaderGuard",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckForHeaderGuard(filename, clean_lines, error):\n  \"\"\"Checks that the file contains a header guard.\n  Logs an error if no #ifndef header guard is present.  For other\n  headers, checks that the full pathname is used.\n  Args:\n    filename: The name of the C++ header file.\n    clean_lines: A CleansedLines instance containing the file.\n    error: The function to call with any errors found.\n  \"\"\"\n  # Don't check for header guards if there are error suppression",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckHeaderFileIncluded",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckHeaderFileIncluded(filename, include_state, error):\n  \"\"\"Logs an error if a .cc file does not include its header.\"\"\"\n  # Do not check test files\n  fileinfo = FileInfo(filename)\n  if Search(_TEST_FILE_SUFFIX, fileinfo.BaseName()):\n    return\n  headerfile = filename[0:len(filename) - len(fileinfo.Extension())] + '.h'\n  if not os.path.exists(headerfile):\n    return\n  headername = FileInfo(headerfile).RepositoryName()",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckForBadCharacters",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckForBadCharacters(filename, lines, error):\n  \"\"\"Logs an error for each line containing bad characters.\n  Two kinds of bad characters:\n  1. Unicode replacement characters: These indicate that either the file\n  contained invalid UTF-8 (likely) or Unicode replacement characters (which\n  it shouldn't).  Note that it's possible for this to throw off line\n  numbering if the invalid UTF-8 occurred adjacent to a newline.\n  2. NUL bytes.  These are problematic for some tools.\n  Args:\n    filename: The name of the current file.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckForNewlineAtEOF",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckForNewlineAtEOF(filename, lines, error):\n  \"\"\"Logs an error if there is no newline char at the end of the file.\n  Args:\n    filename: The name of the current file.\n    lines: An array of strings, each representing a line of the file.\n    error: The function to call with any errors found.\n  \"\"\"\n  # The array lines() was created by adding two newlines to the\n  # original file (go figure), then splitting on \\n.\n  # To verify that the file ends in \\n, we just have to make sure the",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckForMultilineCommentsAndStrings",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckForMultilineCommentsAndStrings(filename, clean_lines, linenum, error):\n  \"\"\"Logs an error if we see /* ... */ or \"...\" that extend past one line.\n  /* ... */ comments are legit inside macros, for one line.\n  Otherwise, we prefer // comments, so it's ok to warn about the\n  other.  Likewise, it's ok for strings to extend across multiple\n  lines, as long as a line continuation character (backslash)\n  terminates each line. Although not currently prohibited by the C++\n  style guide, it's ugly and unnecessary. We don't do well with either\n  in this lint program, so we warn about both.\n  Args:",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckPosixThreading",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckPosixThreading(filename, clean_lines, linenum, error):\n  \"\"\"Checks for calls to thread-unsafe functions.\n  Much code has been originally written without consideration of\n  multi-threading. Also, engineers are relying on their old experience;\n  they have learned posix before threading extensions were added. These\n  tests guide the engineers to use thread-safe functions (when using\n  posix directly).\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckVlogArguments",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckVlogArguments(filename, clean_lines, linenum, error):\n  \"\"\"Checks that VLOG() is only used for defining a logging level.\n  For example, VLOG(2) is correct. VLOG(INFO), VLOG(WARNING), VLOG(ERROR), and\n  VLOG(FATAL) are not.\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckInvalidIncrement",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckInvalidIncrement(filename, clean_lines, linenum, error):\n  \"\"\"Checks for invalid increment *count++.\n  For example following function:\n  void increment_counter(int* count) {\n    *count++;\n  }\n  is invalid, because it effectively does count++, moving pointer, and should\n  be replaced with ++*count, (*count)++ or *count += 1.\n  Args:\n    filename: The name of the current file.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "IsMacroDefinition",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def IsMacroDefinition(clean_lines, linenum):\n  if Search(r'^#define', clean_lines[linenum]):\n    return True\n  if linenum > 0 and Search(r'\\\\$', clean_lines[linenum - 1]):\n    return True\n  return False\ndef IsForwardClassDeclaration(clean_lines, linenum):\n  return Match(r'^\\s*(\\btemplate\\b)*.*class\\s+\\w+;\\s*$', clean_lines[linenum])\nclass _BlockInfo(object):\n  \"\"\"Stores information about a generic block of code.\"\"\"",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "IsForwardClassDeclaration",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def IsForwardClassDeclaration(clean_lines, linenum):\n  return Match(r'^\\s*(\\btemplate\\b)*.*class\\s+\\w+;\\s*$', clean_lines[linenum])\nclass _BlockInfo(object):\n  \"\"\"Stores information about a generic block of code.\"\"\"\n  def __init__(self, linenum, seen_open_brace):\n    self.starting_linenum = linenum\n    self.seen_open_brace = seen_open_brace\n    self.open_parentheses = 0\n    self.inline_asm = _NO_ASM\n    self.check_namespace_indentation = False",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckForNonStandardConstructs",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckForNonStandardConstructs(filename, clean_lines, linenum,\n                                  nesting_state, error):\n  r\"\"\"Logs an error if we see certain non-ANSI constructs ignored by gcc-2.\n  Complain about several constructs which gcc-2 accepts, but which are\n  not standard C++.  Warning about these in lint is one way to ease the\n  transition to new compilers.\n  - put storage class first (e.g. \"static const\" instead of \"const static\").\n  - \"%lld\" instead of %qd\" in printf-type functions.\n  - \"%1$d\" is non-standard in printf-type functions.\n  - \"\\%\" is an undefined character escape sequence.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckSpacingForFunctionCall",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckSpacingForFunctionCall(filename, clean_lines, linenum, error):\n  \"\"\"Checks for the correctness of various spacing around function calls.\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"\n  line = clean_lines.elided[linenum]\n  # Since function calls often occur inside if/for/while/switch",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "IsBlankLine",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def IsBlankLine(line):\n  \"\"\"Returns true if the given line is blank.\n  We consider a line to be blank if the line is empty or consists of\n  only white spaces.\n  Args:\n    line: A line of a string.\n  Returns:\n    True, if the given line is blank.\n  \"\"\"\n  return not line or line.isspace()",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckForNamespaceIndentation",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckForNamespaceIndentation(filename, nesting_state, clean_lines, line,\n                                 error):\n  is_namespace_indent_item = (\n      len(nesting_state.stack) > 1 and\n      nesting_state.stack[-1].check_namespace_indentation and\n      isinstance(nesting_state.previous_stack_top, _NamespaceInfo) and\n      nesting_state.previous_stack_top == nesting_state.stack[-2])\n  if ShouldCheckNamespaceIndentation(nesting_state, is_namespace_indent_item,\n                                     clean_lines.elided, line):\n    CheckItemIndentationInNamespace(filename, clean_lines.elided,",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckForFunctionLengths",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckForFunctionLengths(filename, clean_lines, linenum,\n                            function_state, error):\n  \"\"\"Reports for long function bodies.\n  For an overview why this is done, see:\n  https://google-styleguide.googlecode.com/svn/trunk/cppguide.xml#Write_Short_Functions\n  Uses a simplistic algorithm assuming other style guidelines\n  (especially spacing) are followed.\n  Only checks unindented functions, so class members are unchecked.\n  Trivial bodies are unchecked, so constructors with huge initializer lists\n  may be missed.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckComment",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckComment(line, filename, linenum, next_line_start, error):\n  \"\"\"Checks for common mistakes in comments.\n  Args:\n    line: The line in question.\n    filename: The name of the current file.\n    linenum: The number of the line to check.\n    next_line_start: The first non-whitespace column of the next line.\n    error: The function to call with any errors found.\n  \"\"\"\n  commentpos = line.find('//')",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckSpacing",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckSpacing(filename, clean_lines, linenum, nesting_state, error):\n  \"\"\"Checks for the correctness of various spacing issues in the code.\n  Things we check for: spaces around operators, spaces after\n  if/for/while/switch, no spaces around parens in function calls, two\n  spaces between code and comment, don't start a block with a blank\n  line, don't end a function with a blank line, don't add a blank line\n  after public/protected/private, don't have too many blank lines in a row.\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckOperatorSpacing",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckOperatorSpacing(filename, clean_lines, linenum, error):\n  \"\"\"Checks for horizontal spacing around operators.\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"\n  line = clean_lines.elided[linenum]\n  # Don't try to do spacing checks for operator methods.  Do this by",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckParenthesisSpacing",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckParenthesisSpacing(filename, clean_lines, linenum, error):\n  \"\"\"Checks for horizontal spacing around parentheses.\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"\n  line = clean_lines.elided[linenum]\n  # No spaces after an if, while, switch, or for",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckCommaSpacing",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckCommaSpacing(filename, clean_lines, linenum, error):\n  \"\"\"Checks for horizontal spacing near commas and semicolons.\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"\n  raw = clean_lines.lines_without_raw_strings\n  line = clean_lines.elided[linenum]",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckBracesSpacing",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckBracesSpacing(filename, clean_lines, linenum, nesting_state, error):\n  \"\"\"Checks for horizontal spacing near commas.\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    nesting_state: A NestingState instance which maintains information about\n                   the current stack of nested blocks being parsed.\n    error: The function to call with any errors found.\n  \"\"\"",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "IsDecltype",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def IsDecltype(clean_lines, linenum, column):\n  \"\"\"Check if the token ending on (linenum, column) is decltype().\n  Args:\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: the number of the line to check.\n    column: end column of the token to check.\n  Returns:\n    True if this token is decltype() expression, False otherwise.\n  \"\"\"\n  (text, _, start_col) = ReverseCloseExpression(clean_lines, linenum, column)",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckSectionSpacing",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckSectionSpacing(filename, clean_lines, class_info, linenum, error):\n  \"\"\"Checks for additional blank line issues related to sections.\n  Currently the only thing checked here is blank line before protected/private.\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    class_info: A _ClassInfo objects.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "GetPreviousNonBlankLine",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def GetPreviousNonBlankLine(clean_lines, linenum):\n  \"\"\"Return the most recent non-blank line and its line number.\n  Args:\n    clean_lines: A CleansedLines instance containing the file contents.\n    linenum: The number of the line to check.\n  Returns:\n    A tuple with two elements.  The first element is the contents of the last\n    non-blank line before the current line, or the empty string if this is the\n    first non-blank line.  The second is the line number of that line, or -1\n    if this is the first non-blank line.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckBraces",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckBraces(filename, clean_lines, linenum, error):\n  \"\"\"Looks for misplaced braces (e.g. at the end of line).\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"\n  line = clean_lines.elided[linenum]        # get rid of comments and strings\n  if Match(r'\\s*{\\s*$', line):",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckTrailingSemicolon",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckTrailingSemicolon(filename, clean_lines, linenum, error):\n  \"\"\"Looks for redundant trailing semicolon.\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"\n  line = clean_lines.elided[linenum]\n  # Block bodies should not be followed by a semicolon.  Due to C++11",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckEmptyBlockBody",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckEmptyBlockBody(filename, clean_lines, linenum, error):\n  \"\"\"Look for empty loop/conditional body with only a single semicolon.\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"\n  # Search for loop keywords at the beginning of the line.  Because only\n  # whitespaces are allowed before the keywords, this will also ignore most",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "FindCheckMacro",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def FindCheckMacro(line):\n  \"\"\"Find a replaceable CHECK-like macro.\n  Args:\n    line: line to search on.\n  Returns:\n    (macro name, start position), or (None, -1) if no replaceable\n    macro is found.\n  \"\"\"\n  for macro in _CHECK_MACROS:\n    i = line.find(macro)",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckCheck",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckCheck(filename, clean_lines, linenum, error):\n  \"\"\"Checks the use of CHECK and EXPECT macros.\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"\n  # Decide the set of replacement macros that should be suggested\n  lines = clean_lines.elided",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckAltTokens",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckAltTokens(filename, clean_lines, linenum, error):\n  \"\"\"Check alternative keywords being used in boolean expressions.\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"\n  line = clean_lines.elided[linenum]\n  # Avoid preprocessor lines",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "GetLineWidth",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def GetLineWidth(line):\n  \"\"\"Determines the width of the line in column positions.\n  Args:\n    line: A string, which may be a Unicode string.\n  Returns:\n    The width of the line in column positions, accounting for Unicode\n    combining characters and wide characters.\n  \"\"\"\n  if isinstance(line, unicode):\n    width = 0",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckStyle",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckStyle(filename, clean_lines, linenum, file_extension, nesting_state,\n               error):\n  \"\"\"Checks rules from the 'C++ style rules' section of cppguide.html.\n  Most of these rules are hard to test (naming, comment style), but we\n  do what we can.  In particular we check for 2-space indents, line lengths,\n  tab usage, spaces inside code, etc.\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckIncludeLine",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckIncludeLine(filename, clean_lines, linenum, include_state, error):\n  \"\"\"Check rules that are applicable to #include lines.\n  Strings on #include lines are NOT removed from elided line, to make\n  certain tasks easier. However, to prevent false positives, checks\n  applicable to #include lines in CheckLanguage must be put here.\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    include_state: An _IncludeState instance in which the headers are inserted.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckLanguage",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckLanguage(filename, clean_lines, linenum, file_extension,\n                  include_state, nesting_state, error):\n  \"\"\"Checks rules from the 'C++ language rules' section of cppguide.html.\n  Some of these rules are hard to test (function overloading, using\n  uint32 inappropriately), but we do the best we can.\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    file_extension: The extension (without the dot) of the filename.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckGlobalStatic",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckGlobalStatic(filename, clean_lines, linenum, error):\n  \"\"\"Check for unsafe global or static objects.\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"\n  line = clean_lines.elided[linenum]\n  # Match two lines at a time to support multiline declarations",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckPrintf",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckPrintf(filename, clean_lines, linenum, error):\n  \"\"\"Check for printf related issues.\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"\n  line = clean_lines.elided[linenum]\n  # When snprintf is used, the second argument shouldn't be a literal.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "IsDerivedFunction",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def IsDerivedFunction(clean_lines, linenum):\n  \"\"\"Check if current line contains an inherited function.\n  Args:\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n  Returns:\n    True if current line contains a function with \"override\"\n    virt-specifier.\n  \"\"\"\n  # Scan back a few lines for start of current function",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "IsOutOfLineMethodDefinition",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def IsOutOfLineMethodDefinition(clean_lines, linenum):\n  \"\"\"Check if current line contains an out-of-line method definition.\n  Args:\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n  Returns:\n    True if current line contains an out-of-line method definition.\n  \"\"\"\n  # Scan back a few lines for start of current function\n  for i in xrange(linenum, max(-1, linenum - 10), -1):",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "IsInitializerList",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def IsInitializerList(clean_lines, linenum):\n  \"\"\"Check if current line is inside constructor initializer list.\n  Args:\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n  Returns:\n    True if current line appears to be inside constructor initializer\n    list, False otherwise.\n  \"\"\"\n  for i in xrange(linenum, 1, -1):",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckForNonConstReference",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckForNonConstReference(filename, clean_lines, linenum,\n                              nesting_state, error):\n  \"\"\"Check for non-const references.\n  Separate from CheckLanguage since it scans backwards from current\n  line, instead of scanning forward.\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    nesting_state: A NestingState instance which maintains information about",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckCasts",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckCasts(filename, clean_lines, linenum, error):\n  \"\"\"Various cast related checks.\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"\n  line = clean_lines.elided[linenum]\n  # Check to see if they're using an conversion function cast.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckCStyleCast",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckCStyleCast(filename, clean_lines, linenum, cast_type, pattern, error):\n  \"\"\"Checks for a C-style cast by looking for the pattern.\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    cast_type: The string for the C++ cast to recommend.  This is either\n      reinterpret_cast, static_cast, or const_cast, depending.\n    pattern: The regular expression used to find C-style casts.\n    error: The function to call with any errors found.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "ExpectingFunctionArgs",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def ExpectingFunctionArgs(clean_lines, linenum):\n  \"\"\"Checks whether where function type arguments are expected.\n  Args:\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n  Returns:\n    True if the line at 'linenum' is inside something that expects arguments\n    of function types.\n  \"\"\"\n  line = clean_lines.elided[linenum]",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "FilesBelongToSameModule",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def FilesBelongToSameModule(filename_cc, filename_h):\n  \"\"\"Check if these two filenames belong to the same module.\n  The concept of a 'module' here is a as follows:\n  foo.h, foo-inl.h, foo.cc, foo_test.cc and foo_unittest.cc belong to the\n  same 'module' if they are in the same directory.\n  some/path/public/xyzzy and some/path/internal/xyzzy are also considered\n  to belong to the same module here.\n  If the filename_cc contains a longer path than the filename_h, for example,\n  '/absolute/path/to/base/sysinfo.cc', and this file would include\n  'base/sysinfo.h', this function also produces the prefix needed to open the",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "UpdateIncludeState",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def UpdateIncludeState(filename, include_dict, io=codecs):\n  \"\"\"Fill up the include_dict with new includes found from the file.\n  Args:\n    filename: the name of the header to read.\n    include_dict: a dictionary in which the headers are inserted.\n    io: The io factory to use to read the file. Provided for testability.\n  Returns:\n    True if a header was successfully added. False otherwise.\n  \"\"\"\n  headerfile = None",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckForIncludeWhatYouUse",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckForIncludeWhatYouUse(filename, clean_lines, include_state, error,\n                              io=codecs):\n  \"\"\"Reports for missing stl includes.\n  This function will output warnings to make sure you are including the headers\n  necessary for the stl containers and functions that you use. We only give one\n  reason to include a header. For example, if you use both equal_to<> and\n  less<> in a .h file, only one (the latter in the file) of these will be\n  reported as a reason to include the <functional>.\n  Args:\n    filename: The name of the current file.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckMakePairUsesDeduction",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckMakePairUsesDeduction(filename, clean_lines, linenum, error):\n  \"\"\"Check that make_pair's template arguments are deduced.\n  G++ 4.6 in C++11 mode fails badly if make_pair's template arguments are\n  specified explicitly, and such use isn't intended in any case.\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckRedundantVirtual",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckRedundantVirtual(filename, clean_lines, linenum, error):\n  \"\"\"Check if line contains a redundant \"virtual\" function-specifier.\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"\n  # Look for \"virtual\" on current line.\n  line = clean_lines.elided[linenum]",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckRedundantOverrideOrFinal",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckRedundantOverrideOrFinal(filename, clean_lines, linenum, error):\n  \"\"\"Check if line contains a redundant \"override\" or \"final\" virt-specifier.\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"\n  # Look for closing parenthesis nearby.  We need one to confirm where\n  # the declarator ends and where the virt-specifier starts to avoid",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "IsBlockInNameSpace",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def IsBlockInNameSpace(nesting_state, is_forward_declaration):\n  \"\"\"Checks that the new block is directly in a namespace.\n  Args:\n    nesting_state: The _NestingState object that contains info about our state.\n    is_forward_declaration: If the class is a forward declared class.\n  Returns:\n    Whether or not the new block is directly in a namespace.\n  \"\"\"\n  if is_forward_declaration:\n    if len(nesting_state.stack) >= 1 and (",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "ShouldCheckNamespaceIndentation",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def ShouldCheckNamespaceIndentation(nesting_state, is_namespace_indent_item,\n                                    raw_lines_no_comments, linenum):\n  \"\"\"This method determines if we should apply our namespace indentation check.\n  Args:\n    nesting_state: The current nesting state.\n    is_namespace_indent_item: If we just put a new class on the stack, True.\n      If the top of the stack is not a class, or we did not recently\n      add the class, False.\n    raw_lines_no_comments: The lines without the comments.\n    linenum: The current line number we are processing.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "CheckItemIndentationInNamespace",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def CheckItemIndentationInNamespace(filename, raw_lines_no_comments, linenum,\n                                    error):\n  line = raw_lines_no_comments[linenum]\n  if Match(r'^\\s+', line):\n    error(filename, linenum, 'runtime/indentation_namespace', 4,\n          'Do not indent within a namespace')\ndef ProcessLine(filename, file_extension, clean_lines, line,\n                include_state, function_state, nesting_state, error,\n                extra_check_functions=[]):\n  \"\"\"Processes a single line in the file.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "ProcessLine",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def ProcessLine(filename, file_extension, clean_lines, line,\n                include_state, function_state, nesting_state, error,\n                extra_check_functions=[]):\n  \"\"\"Processes a single line in the file.\n  Args:\n    filename: Filename of the file that is being processed.\n    file_extension: The extension (dot not included) of the file.\n    clean_lines: An array of strings, each representing a line of the file,\n                 with comments stripped.\n    line: Number of line being processed.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "FlagCxx11Features",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def FlagCxx11Features(filename, clean_lines, linenum, error):\n  \"\"\"Flag those c++11 features that we only allow in certain places.\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"\n  line = clean_lines.elided[linenum]\n  include = Match(r'\\s*#\\s*include\\s+[<\"]([^<\"]+)[\">]', line)",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "FlagCxx14Features",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def FlagCxx14Features(filename, clean_lines, linenum, error):\n  \"\"\"Flag those C++14 features that we restrict.\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"\n  line = clean_lines.elided[linenum]\n  include = Match(r'\\s*#\\s*include\\s+[<\"]([^<\"]+)[\">]', line)",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "ProcessFileData",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def ProcessFileData(filename, file_extension, lines, error,\n                    extra_check_functions=[]):\n  \"\"\"Performs lint checks and reports any errors to the given error function.\n  Args:\n    filename: Filename of the file that is being processed.\n    file_extension: The extension (dot not included) of the file.\n    lines: An array of strings, each representing a line of the file, with the\n           last element being empty if the file is terminated with a newline.\n    error: A callable to which errors are reported, which takes 4 arguments:\n           filename, line number, error level, and message",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "ProcessConfigOverrides",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def ProcessConfigOverrides(filename):\n  \"\"\" Loads the configuration files and processes the config overrides.\n  Args:\n    filename: The name of the file being processed by the linter.\n  Returns:\n    False if the current |filename| should not be processed further.\n  \"\"\"\n  abs_filename = os.path.abspath(filename)\n  cfg_filters = []\n  keep_looking = True",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "ProcessFile",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def ProcessFile(filename, vlevel, extra_check_functions=[]):\n  \"\"\"Does google-lint on a single file.\n  Args:\n    filename: The name of the file to parse.\n    vlevel: The level of errors to report.  Every error of confidence\n    >= verbose_level will be reported.  0 is a good default.\n    extra_check_functions: An array of additional check functions that will be\n                           run on each source line. Each function takes 4\n                           arguments: filename, clean_lines, line, error\n  \"\"\"",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "PrintUsage",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def PrintUsage(message):\n  \"\"\"Prints a brief usage string and exits, optionally with an error message.\n  Args:\n    message: The optional error message.\n  \"\"\"\n  sys.stderr.write(_USAGE)\n  if message:\n    sys.exit('\\nFATAL ERROR: ' + message)\n  else:\n    sys.exit(1)",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "PrintCategories",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def PrintCategories():\n  \"\"\"Prints a list of all the error-categories used by error messages.\n  These are the categories used to filter messages via --filter.\n  \"\"\"\n  sys.stderr.write(''.join('  %s\\n' % cat for cat in _ERROR_CATEGORIES))\n  sys.exit(0)\ndef ParseArguments(args):\n  \"\"\"Parses the command line arguments.\n  This may set the output format and verbosity level as side-effects.\n  Args:",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "ParseArguments",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def ParseArguments(args):\n  \"\"\"Parses the command line arguments.\n  This may set the output format and verbosity level as side-effects.\n  Args:\n    args: The command line arguments:\n  Returns:\n    The list of filenames to lint.\n  \"\"\"\n  try:\n    (opts, filenames) = getopt.getopt(args, '', ['help', 'output=', 'verbose=',",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "def main():\n  filenames = ParseArguments(sys.argv[1:])\n  # Change stderr to write with replacement characters so we don't die\n  # if we try to print something containing non-ASCII characters.\n  sys.stderr = codecs.StreamReaderWriter(sys.stderr,\n                                         codecs.getreader('utf8'),\n                                         codecs.getwriter('utf8'),\n                                         'replace')\n  _cpplint_state.ResetErrorCounts()\n  for filename in filenames:",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_USAGE",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_USAGE = \"\"\"\nSyntax: cpplint.py [--verbose=#] [--output=vs7] [--filter=-x,+y,...]\n                   [--counting=total|toplevel|detailed] [--root=subdir]\n                   [--linelength=digits] [--headers=x,y,...]\n                   [--quiet]\n        <file> [file] ...\n  The style guidelines this tries to follow are those in\n    https://google-styleguide.googlecode.com/svn/trunk/cppguide.xml\n  Every problem is given a confidence score from 1-5, with 5 meaning we are\n  certain of the problem, and 1 meaning it could be a legitimate construct.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_ERROR_CATEGORIES",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_ERROR_CATEGORIES = [\n    'build/class',\n    'build/c++11',\n    'build/c++14',\n    'build/c++tr1',\n    'build/deprecated',\n    'build/endif_comment',\n    'build/explicit_make_pair',\n    'build/forward_decl',\n    'build/header_guard',",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_LEGACY_ERROR_CATEGORIES",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_LEGACY_ERROR_CATEGORIES = [\n    'readability/streams',\n    'readability/function',\n    ]\n# The default state of the category filter. This is overridden by the --filter=\n# flag. By default all errors are on, so only add here categories that should be\n# off by default (i.e., categories that must be enabled by the --filter= flags).\n# All entries here should start with a '-' or '+', as in the --filter= flag.\n_DEFAULT_FILTERS = ['-build/include_alpha']\n# The default list of categories suppressed for C (not C++) files.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_DEFAULT_FILTERS",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_DEFAULT_FILTERS = ['-build/include_alpha']\n# The default list of categories suppressed for C (not C++) files.\n_DEFAULT_C_SUPPRESSED_CATEGORIES = [\n    'readability/casting',\n    ]\n# The default list of categories suppressed for Linux Kernel files.\n_DEFAULT_KERNEL_SUPPRESSED_CATEGORIES = [\n    'whitespace/tab',\n    ]\n# We used to check for high-bit characters, but after much discussion we",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_DEFAULT_C_SUPPRESSED_CATEGORIES",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_DEFAULT_C_SUPPRESSED_CATEGORIES = [\n    'readability/casting',\n    ]\n# The default list of categories suppressed for Linux Kernel files.\n_DEFAULT_KERNEL_SUPPRESSED_CATEGORIES = [\n    'whitespace/tab',\n    ]\n# We used to check for high-bit characters, but after much discussion we\n# decided those were OK, as long as they were in UTF-8 and didn't represent\n# hard-coded international strings, which belong in a separate i18n file.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_DEFAULT_KERNEL_SUPPRESSED_CATEGORIES",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_DEFAULT_KERNEL_SUPPRESSED_CATEGORIES = [\n    'whitespace/tab',\n    ]\n# We used to check for high-bit characters, but after much discussion we\n# decided those were OK, as long as they were in UTF-8 and didn't represent\n# hard-coded international strings, which belong in a separate i18n file.\n# C++ headers\n_CPP_HEADERS = frozenset([\n    # Legacy\n    'algobase.h',",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_CPP_HEADERS",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_CPP_HEADERS = frozenset([\n    # Legacy\n    'algobase.h',\n    'algo.h',\n    'alloc.h',\n    'builtinbuf.h',\n    'bvector.h',\n    'complex.h',\n    'defalloc.h',\n    'deque.h',",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_TYPES",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_TYPES = re.compile(\n    r'^(?:'\n    # [dcl.type.simple]\n    r'(char(16_t|32_t)?)|wchar_t|'\n    r'bool|short|int|long|signed|unsigned|float|double|'\n    # [support.types]\n    r'(ptrdiff_t|size_t|max_align_t|nullptr_t)|'\n    # [cstdint.syn]\n    r'(u?int(_fast|_least)?(8|16|32|64)_t)|'\n    r'(u?int(max|ptr)_t)|'",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_THIRD_PARTY_HEADERS_PATTERN",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_THIRD_PARTY_HEADERS_PATTERN = re.compile(\n    r'^(?:[^/]*[A-Z][^/]*\\.h|lua\\.h|lauxlib\\.h|lualib\\.h)$')\n# Pattern for matching FileInfo.BaseName() against test file name\n_TEST_FILE_SUFFIX = r'(_test|_unittest|_regtest)$'\n# Pattern that matches only complete whitespace, possibly across multiple lines.\n_EMPTY_CONDITIONAL_BODY_PATTERN = re.compile(r'^\\s*$', re.DOTALL)\n# Assertion macros.  These are defined in base/logging.h and\n# testing/base/public/gunit.h.\n_CHECK_MACROS = [\n    'DCHECK', 'CHECK',",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_TEST_FILE_SUFFIX",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_TEST_FILE_SUFFIX = r'(_test|_unittest|_regtest)$'\n# Pattern that matches only complete whitespace, possibly across multiple lines.\n_EMPTY_CONDITIONAL_BODY_PATTERN = re.compile(r'^\\s*$', re.DOTALL)\n# Assertion macros.  These are defined in base/logging.h and\n# testing/base/public/gunit.h.\n_CHECK_MACROS = [\n    'DCHECK', 'CHECK',\n    'EXPECT_TRUE', 'ASSERT_TRUE',\n    'EXPECT_FALSE', 'ASSERT_FALSE',\n    ]",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_EMPTY_CONDITIONAL_BODY_PATTERN",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_EMPTY_CONDITIONAL_BODY_PATTERN = re.compile(r'^\\s*$', re.DOTALL)\n# Assertion macros.  These are defined in base/logging.h and\n# testing/base/public/gunit.h.\n_CHECK_MACROS = [\n    'DCHECK', 'CHECK',\n    'EXPECT_TRUE', 'ASSERT_TRUE',\n    'EXPECT_FALSE', 'ASSERT_FALSE',\n    ]\n# Replacement macros for CHECK/DCHECK/EXPECT_TRUE/EXPECT_FALSE\n_CHECK_REPLACEMENT = dict([(m, {}) for m in _CHECK_MACROS])",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_CHECK_MACROS",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_CHECK_MACROS = [\n    'DCHECK', 'CHECK',\n    'EXPECT_TRUE', 'ASSERT_TRUE',\n    'EXPECT_FALSE', 'ASSERT_FALSE',\n    ]\n# Replacement macros for CHECK/DCHECK/EXPECT_TRUE/EXPECT_FALSE\n_CHECK_REPLACEMENT = dict([(m, {}) for m in _CHECK_MACROS])\nfor op, replacement in [('==', 'EQ'), ('!=', 'NE'),\n                        ('>=', 'GE'), ('>', 'GT'),\n                        ('<=', 'LE'), ('<', 'LT')]:",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_CHECK_REPLACEMENT",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_CHECK_REPLACEMENT = dict([(m, {}) for m in _CHECK_MACROS])\nfor op, replacement in [('==', 'EQ'), ('!=', 'NE'),\n                        ('>=', 'GE'), ('>', 'GT'),\n                        ('<=', 'LE'), ('<', 'LT')]:\n  _CHECK_REPLACEMENT['DCHECK'][op] = 'DCHECK_%s' % replacement\n  _CHECK_REPLACEMENT['CHECK'][op] = 'CHECK_%s' % replacement\n  _CHECK_REPLACEMENT['EXPECT_TRUE'][op] = 'EXPECT_%s' % replacement\n  _CHECK_REPLACEMENT['ASSERT_TRUE'][op] = 'ASSERT_%s' % replacement\nfor op, inv_replacement in [('==', 'NE'), ('!=', 'EQ'),\n                            ('>=', 'LT'), ('>', 'LE'),",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_ALT_TOKEN_REPLACEMENT",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_ALT_TOKEN_REPLACEMENT = {\n    'and': '&&',\n    'bitor': '|',\n    'or': '||',\n    'xor': '^',\n    'compl': '~',\n    'bitand': '&',\n    'and_eq': '&=',\n    'or_eq': '|=',\n    'xor_eq': '^=',",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_ALT_TOKEN_REPLACEMENT_PATTERN",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_ALT_TOKEN_REPLACEMENT_PATTERN = re.compile(\n    r'[ =()](' + ('|'.join(_ALT_TOKEN_REPLACEMENT.keys())) + r')(?=[ (]|$)')\n# These constants define types of headers for use with\n# _IncludeState.CheckNextIncludeOrder().\n_C_SYS_HEADER = 1\n_CPP_SYS_HEADER = 2\n_LIKELY_MY_HEADER = 3\n_POSSIBLE_MY_HEADER = 4\n_OTHER_HEADER = 5\n# These constants define the current inline assembly state",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_C_SYS_HEADER",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_C_SYS_HEADER = 1\n_CPP_SYS_HEADER = 2\n_LIKELY_MY_HEADER = 3\n_POSSIBLE_MY_HEADER = 4\n_OTHER_HEADER = 5\n# These constants define the current inline assembly state\n_NO_ASM = 0       # Outside of inline assembly block\n_INSIDE_ASM = 1   # Inside inline assembly block\n_END_ASM = 2      # Last line of inline assembly block\n_BLOCK_ASM = 3    # The whole block is an inline assembly block",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_CPP_SYS_HEADER",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_CPP_SYS_HEADER = 2\n_LIKELY_MY_HEADER = 3\n_POSSIBLE_MY_HEADER = 4\n_OTHER_HEADER = 5\n# These constants define the current inline assembly state\n_NO_ASM = 0       # Outside of inline assembly block\n_INSIDE_ASM = 1   # Inside inline assembly block\n_END_ASM = 2      # Last line of inline assembly block\n_BLOCK_ASM = 3    # The whole block is an inline assembly block\n# Match start of assembly blocks",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_LIKELY_MY_HEADER",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_LIKELY_MY_HEADER = 3\n_POSSIBLE_MY_HEADER = 4\n_OTHER_HEADER = 5\n# These constants define the current inline assembly state\n_NO_ASM = 0       # Outside of inline assembly block\n_INSIDE_ASM = 1   # Inside inline assembly block\n_END_ASM = 2      # Last line of inline assembly block\n_BLOCK_ASM = 3    # The whole block is an inline assembly block\n# Match start of assembly blocks\n_MATCH_ASM = re.compile(r'^\\s*(?:asm|_asm|__asm|__asm__)'",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_POSSIBLE_MY_HEADER",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_POSSIBLE_MY_HEADER = 4\n_OTHER_HEADER = 5\n# These constants define the current inline assembly state\n_NO_ASM = 0       # Outside of inline assembly block\n_INSIDE_ASM = 1   # Inside inline assembly block\n_END_ASM = 2      # Last line of inline assembly block\n_BLOCK_ASM = 3    # The whole block is an inline assembly block\n# Match start of assembly blocks\n_MATCH_ASM = re.compile(r'^\\s*(?:asm|_asm|__asm|__asm__)'\n                        r'(?:\\s+(volatile|__volatile__))?'",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_OTHER_HEADER",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_OTHER_HEADER = 5\n# These constants define the current inline assembly state\n_NO_ASM = 0       # Outside of inline assembly block\n_INSIDE_ASM = 1   # Inside inline assembly block\n_END_ASM = 2      # Last line of inline assembly block\n_BLOCK_ASM = 3    # The whole block is an inline assembly block\n# Match start of assembly blocks\n_MATCH_ASM = re.compile(r'^\\s*(?:asm|_asm|__asm|__asm__)'\n                        r'(?:\\s+(volatile|__volatile__))?'\n                        r'\\s*[{(]')",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_NO_ASM",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_NO_ASM = 0       # Outside of inline assembly block\n_INSIDE_ASM = 1   # Inside inline assembly block\n_END_ASM = 2      # Last line of inline assembly block\n_BLOCK_ASM = 3    # The whole block is an inline assembly block\n# Match start of assembly blocks\n_MATCH_ASM = re.compile(r'^\\s*(?:asm|_asm|__asm|__asm__)'\n                        r'(?:\\s+(volatile|__volatile__))?'\n                        r'\\s*[{(]')\n# Match strings that indicate we're working on a C (not C++) file.\n_SEARCH_C_FILE = re.compile(r'\\b(?:LINT_C_FILE|'",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_INSIDE_ASM",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_INSIDE_ASM = 1   # Inside inline assembly block\n_END_ASM = 2      # Last line of inline assembly block\n_BLOCK_ASM = 3    # The whole block is an inline assembly block\n# Match start of assembly blocks\n_MATCH_ASM = re.compile(r'^\\s*(?:asm|_asm|__asm|__asm__)'\n                        r'(?:\\s+(volatile|__volatile__))?'\n                        r'\\s*[{(]')\n# Match strings that indicate we're working on a C (not C++) file.\n_SEARCH_C_FILE = re.compile(r'\\b(?:LINT_C_FILE|'\n                            r'vim?:\\s*.*(\\s*|:)filetype=c(\\s*|:|$))')",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_END_ASM",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_END_ASM = 2      # Last line of inline assembly block\n_BLOCK_ASM = 3    # The whole block is an inline assembly block\n# Match start of assembly blocks\n_MATCH_ASM = re.compile(r'^\\s*(?:asm|_asm|__asm|__asm__)'\n                        r'(?:\\s+(volatile|__volatile__))?'\n                        r'\\s*[{(]')\n# Match strings that indicate we're working on a C (not C++) file.\n_SEARCH_C_FILE = re.compile(r'\\b(?:LINT_C_FILE|'\n                            r'vim?:\\s*.*(\\s*|:)filetype=c(\\s*|:|$))')\n# Match string that indicates we're working on a Linux Kernel file.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_BLOCK_ASM",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_BLOCK_ASM = 3    # The whole block is an inline assembly block\n# Match start of assembly blocks\n_MATCH_ASM = re.compile(r'^\\s*(?:asm|_asm|__asm|__asm__)'\n                        r'(?:\\s+(volatile|__volatile__))?'\n                        r'\\s*[{(]')\n# Match strings that indicate we're working on a C (not C++) file.\n_SEARCH_C_FILE = re.compile(r'\\b(?:LINT_C_FILE|'\n                            r'vim?:\\s*.*(\\s*|:)filetype=c(\\s*|:|$))')\n# Match string that indicates we're working on a Linux Kernel file.\n_SEARCH_KERNEL_FILE = re.compile(r'\\b(?:LINT_KERNEL_FILE)')",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_MATCH_ASM",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_MATCH_ASM = re.compile(r'^\\s*(?:asm|_asm|__asm|__asm__)'\n                        r'(?:\\s+(volatile|__volatile__))?'\n                        r'\\s*[{(]')\n# Match strings that indicate we're working on a C (not C++) file.\n_SEARCH_C_FILE = re.compile(r'\\b(?:LINT_C_FILE|'\n                            r'vim?:\\s*.*(\\s*|:)filetype=c(\\s*|:|$))')\n# Match string that indicates we're working on a Linux Kernel file.\n_SEARCH_KERNEL_FILE = re.compile(r'\\b(?:LINT_KERNEL_FILE)')\n_regexp_compile_cache = {}\n# {str, set(int)}: a map from error categories to sets of linenumbers",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_SEARCH_C_FILE",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_SEARCH_C_FILE = re.compile(r'\\b(?:LINT_C_FILE|'\n                            r'vim?:\\s*.*(\\s*|:)filetype=c(\\s*|:|$))')\n# Match string that indicates we're working on a Linux Kernel file.\n_SEARCH_KERNEL_FILE = re.compile(r'\\b(?:LINT_KERNEL_FILE)')\n_regexp_compile_cache = {}\n# {str, set(int)}: a map from error categories to sets of linenumbers\n# on which those errors are expected and should be suppressed.\n_error_suppressions = {}\n# The root directory used for deriving header guard CPP variable.\n# This is set by --root flag.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_SEARCH_KERNEL_FILE",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_SEARCH_KERNEL_FILE = re.compile(r'\\b(?:LINT_KERNEL_FILE)')\n_regexp_compile_cache = {}\n# {str, set(int)}: a map from error categories to sets of linenumbers\n# on which those errors are expected and should be suppressed.\n_error_suppressions = {}\n# The root directory used for deriving header guard CPP variable.\n# This is set by --root flag.\n_root = None\n_root_debug = False\n# The allowed line length of files.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_regexp_compile_cache",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_regexp_compile_cache = {}\n# {str, set(int)}: a map from error categories to sets of linenumbers\n# on which those errors are expected and should be suppressed.\n_error_suppressions = {}\n# The root directory used for deriving header guard CPP variable.\n# This is set by --root flag.\n_root = None\n_root_debug = False\n# The allowed line length of files.\n# This is set by --linelength flag.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_error_suppressions",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_error_suppressions = {}\n# The root directory used for deriving header guard CPP variable.\n# This is set by --root flag.\n_root = None\n_root_debug = False\n# The allowed line length of files.\n# This is set by --linelength flag.\n_line_length = 80\n# The allowed extensions for file names\n# This is set by --extensions flag.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_root",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_root = None\n_root_debug = False\n# The allowed line length of files.\n# This is set by --linelength flag.\n_line_length = 80\n# The allowed extensions for file names\n# This is set by --extensions flag.\n_valid_extensions = set(['cc', 'h', 'cpp', 'cu', 'cuh'])\n# Treat all headers starting with 'h' equally: .h, .hpp, .hxx etc.\n# This is set by --headers flag.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_root_debug",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_root_debug = False\n# The allowed line length of files.\n# This is set by --linelength flag.\n_line_length = 80\n# The allowed extensions for file names\n# This is set by --extensions flag.\n_valid_extensions = set(['cc', 'h', 'cpp', 'cu', 'cuh'])\n# Treat all headers starting with 'h' equally: .h, .hpp, .hxx etc.\n# This is set by --headers flag.\n_hpp_headers = set(['h'])",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_line_length",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_line_length = 80\n# The allowed extensions for file names\n# This is set by --extensions flag.\n_valid_extensions = set(['cc', 'h', 'cpp', 'cu', 'cuh'])\n# Treat all headers starting with 'h' equally: .h, .hpp, .hxx etc.\n# This is set by --headers flag.\n_hpp_headers = set(['h'])\n# {str, bool}: a map from error categories to booleans which indicate if the\n# category should be suppressed for every line.\n_global_error_suppressions = {}",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_valid_extensions",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_valid_extensions = set(['cc', 'h', 'cpp', 'cu', 'cuh'])\n# Treat all headers starting with 'h' equally: .h, .hpp, .hxx etc.\n# This is set by --headers flag.\n_hpp_headers = set(['h'])\n# {str, bool}: a map from error categories to booleans which indicate if the\n# category should be suppressed for every line.\n_global_error_suppressions = {}\ndef ProcessHppHeadersOption(val):\n  global _hpp_headers\n  try:",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_hpp_headers",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_hpp_headers = set(['h'])\n# {str, bool}: a map from error categories to booleans which indicate if the\n# category should be suppressed for every line.\n_global_error_suppressions = {}\ndef ProcessHppHeadersOption(val):\n  global _hpp_headers\n  try:\n    _hpp_headers = set(val.split(','))\n    # Automatically append to extensions list so it does not have to be set 2 times\n    _valid_extensions.update(_hpp_headers)",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_global_error_suppressions",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_global_error_suppressions = {}\ndef ProcessHppHeadersOption(val):\n  global _hpp_headers\n  try:\n    _hpp_headers = set(val.split(','))\n    # Automatically append to extensions list so it does not have to be set 2 times\n    _valid_extensions.update(_hpp_headers)\n  except ValueError:\n    PrintUsage('Header extensions must be comma separated list.')\ndef IsHeaderExtension(file_extension):",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_cpplint_state",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_cpplint_state = _CppLintState()\ndef _OutputFormat():\n  \"\"\"Gets the module's output format.\"\"\"\n  return _cpplint_state.output_format\ndef _SetOutputFormat(output_format):\n  \"\"\"Sets the module's output format.\"\"\"\n  _cpplint_state.SetOutputFormat(output_format)\ndef _Quiet():\n  \"\"\"Return's the module's quiet setting.\"\"\"\n  return _cpplint_state.quiet",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_RE_PATTERN_CLEANSE_LINE_ESCAPES",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_RE_PATTERN_CLEANSE_LINE_ESCAPES = re.compile(\n    r'\\\\([abfnrtv?\"\\\\\\']|\\d+|x[0-9a-fA-F]+)')\n# Match a single C style comment on the same line.\n_RE_PATTERN_C_COMMENTS = r'/\\*(?:[^*]|\\*(?!/))*\\*/'\n# Matches multi-line C style comments.\n# This RE is a little bit more complicated than one might expect, because we\n# have to take care of space removals tools so we can handle comments inside\n# statements better.\n# The current rule is: We only clear spaces from both sides when we're at the\n# end of the line. Otherwise, we try to remove spaces from the right side,",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_RE_PATTERN_C_COMMENTS",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_RE_PATTERN_C_COMMENTS = r'/\\*(?:[^*]|\\*(?!/))*\\*/'\n# Matches multi-line C style comments.\n# This RE is a little bit more complicated than one might expect, because we\n# have to take care of space removals tools so we can handle comments inside\n# statements better.\n# The current rule is: We only clear spaces from both sides when we're at the\n# end of the line. Otherwise, we try to remove spaces from the right side,\n# if this doesn't work we try on left side but only if there's a non-character\n# on the right.\n_RE_PATTERN_CLEANSE_LINE_C_COMMENTS = re.compile(",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_RE_PATTERN_CLEANSE_LINE_C_COMMENTS",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_RE_PATTERN_CLEANSE_LINE_C_COMMENTS = re.compile(\n    r'(\\s*' + _RE_PATTERN_C_COMMENTS + r'\\s*$|' +\n    _RE_PATTERN_C_COMMENTS + r'\\s+|' +\n    r'\\s+' + _RE_PATTERN_C_COMMENTS + r'(?=\\W)|' +\n    _RE_PATTERN_C_COMMENTS + r')')\ndef IsCppString(line):\n  \"\"\"Does line terminate so, that the next symbol is in string constant.\n  This function does not consider single-line nor multi-line comments.\n  Args:\n    line: is a partial line of code starting from the 0..n.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_UNSAFE_FUNC_PREFIX",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_UNSAFE_FUNC_PREFIX = r'(?:[-+*/=%^&|(<]\\s*|>\\s+)'\n_THREADING_LIST = (\n    ('asctime(', 'asctime_r(', _UNSAFE_FUNC_PREFIX + r'asctime\\([^)]+\\)'),\n    ('ctime(', 'ctime_r(', _UNSAFE_FUNC_PREFIX + r'ctime\\([^)]+\\)'),\n    ('getgrgid(', 'getgrgid_r(', _UNSAFE_FUNC_PREFIX + r'getgrgid\\([^)]+\\)'),\n    ('getgrnam(', 'getgrnam_r(', _UNSAFE_FUNC_PREFIX + r'getgrnam\\([^)]+\\)'),\n    ('getlogin(', 'getlogin_r(', _UNSAFE_FUNC_PREFIX + r'getlogin\\(\\)'),\n    ('getpwnam(', 'getpwnam_r(', _UNSAFE_FUNC_PREFIX + r'getpwnam\\([^)]+\\)'),\n    ('getpwuid(', 'getpwuid_r(', _UNSAFE_FUNC_PREFIX + r'getpwuid\\([^)]+\\)'),\n    ('gmtime(', 'gmtime_r(', _UNSAFE_FUNC_PREFIX + r'gmtime\\([^)]+\\)'),",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_THREADING_LIST",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_THREADING_LIST = (\n    ('asctime(', 'asctime_r(', _UNSAFE_FUNC_PREFIX + r'asctime\\([^)]+\\)'),\n    ('ctime(', 'ctime_r(', _UNSAFE_FUNC_PREFIX + r'ctime\\([^)]+\\)'),\n    ('getgrgid(', 'getgrgid_r(', _UNSAFE_FUNC_PREFIX + r'getgrgid\\([^)]+\\)'),\n    ('getgrnam(', 'getgrnam_r(', _UNSAFE_FUNC_PREFIX + r'getgrnam\\([^)]+\\)'),\n    ('getlogin(', 'getlogin_r(', _UNSAFE_FUNC_PREFIX + r'getlogin\\(\\)'),\n    ('getpwnam(', 'getpwnam_r(', _UNSAFE_FUNC_PREFIX + r'getpwnam\\([^)]+\\)'),\n    ('getpwuid(', 'getpwuid_r(', _UNSAFE_FUNC_PREFIX + r'getpwuid\\([^)]+\\)'),\n    ('gmtime(', 'gmtime_r(', _UNSAFE_FUNC_PREFIX + r'gmtime\\([^)]+\\)'),\n    ('localtime(', 'localtime_r(', _UNSAFE_FUNC_PREFIX + r'localtime\\([^)]+\\)'),",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_RE_PATTERN_INVALID_INCREMENT",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_RE_PATTERN_INVALID_INCREMENT = re.compile(\n    r'^\\s*\\*\\w+(\\+\\+|--);')\ndef CheckInvalidIncrement(filename, clean_lines, linenum, error):\n  \"\"\"Checks for invalid increment *count++.\n  For example following function:\n  void increment_counter(int* count) {\n    *count++;\n  }\n  is invalid, because it effectively does count++, moving pointer, and should\n  be replaced with ++*count, (*count)++ or *count += 1.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_RE_PATTERN_TODO",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_RE_PATTERN_TODO = re.compile(r'^//(\\s*)TODO(\\(.+?\\))?:?(\\s|$)?')\ndef CheckComment(line, filename, linenum, next_line_start, error):\n  \"\"\"Checks for common mistakes in comments.\n  Args:\n    line: The line in question.\n    filename: The name of the current file.\n    linenum: The number of the line to check.\n    next_line_start: The first non-whitespace column of the next line.\n    error: The function to call with any errors found.\n  \"\"\"",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_RE_PATTERN_INCLUDE",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_RE_PATTERN_INCLUDE = re.compile(r'^\\s*#\\s*include\\s*([<\"])([^>\"]*)[>\"].*$')\n# Matches the first component of a filename delimited by -s and _s. That is:\n#  _RE_FIRST_COMPONENT.match('foo').group(0) == 'foo'\n#  _RE_FIRST_COMPONENT.match('foo.cc').group(0) == 'foo'\n#  _RE_FIRST_COMPONENT.match('foo-bar_baz.cc').group(0) == 'foo'\n#  _RE_FIRST_COMPONENT.match('foo_bar-baz.cc').group(0) == 'foo'\n_RE_FIRST_COMPONENT = re.compile(r'^[^-_.]+')\ndef _DropCommonSuffixes(filename):\n  \"\"\"Drops common suffixes like _test.cc or -inl.h from filename.\n  For example:",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_RE_FIRST_COMPONENT",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_RE_FIRST_COMPONENT = re.compile(r'^[^-_.]+')\ndef _DropCommonSuffixes(filename):\n  \"\"\"Drops common suffixes like _test.cc or -inl.h from filename.\n  For example:\n    >>> _DropCommonSuffixes('foo/foo-inl.h')\n    'foo/foo'\n    >>> _DropCommonSuffixes('foo/bar/foo.cc')\n    'foo/bar/foo'\n    >>> _DropCommonSuffixes('foo/foo_internal.h')\n    'foo/foo'",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_RE_PATTERN_IDENT",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_RE_PATTERN_IDENT = r'[_a-zA-Z]\\w*'  # =~ [[:alpha:]][[:alnum:]]*\n_RE_PATTERN_TYPE = (\n    r'(?:const\\s+)?(?:typename\\s+|class\\s+|struct\\s+|union\\s+|enum\\s+)?'\n    r'(?:\\w|'\n    r'\\s*<(?:<(?:<[^<>]*>|[^<>])*>|[^<>])*>|'\n    r'::)+')\n# A call-by-reference parameter ends with '& identifier'.\n_RE_PATTERN_REF_PARAM = re.compile(\n    r'(' + _RE_PATTERN_TYPE + r'(?:\\s*(?:\\bconst\\b|[*]))*\\s*'\n    r'&\\s*' + _RE_PATTERN_IDENT + r')\\s*(?:=[^,()]+)?[,)]')",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_RE_PATTERN_TYPE",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_RE_PATTERN_TYPE = (\n    r'(?:const\\s+)?(?:typename\\s+|class\\s+|struct\\s+|union\\s+|enum\\s+)?'\n    r'(?:\\w|'\n    r'\\s*<(?:<(?:<[^<>]*>|[^<>])*>|[^<>])*>|'\n    r'::)+')\n# A call-by-reference parameter ends with '& identifier'.\n_RE_PATTERN_REF_PARAM = re.compile(\n    r'(' + _RE_PATTERN_TYPE + r'(?:\\s*(?:\\bconst\\b|[*]))*\\s*'\n    r'&\\s*' + _RE_PATTERN_IDENT + r')\\s*(?:=[^,()]+)?[,)]')\n# A call-by-const-reference parameter either ends with 'const& identifier'",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_RE_PATTERN_REF_PARAM",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_RE_PATTERN_REF_PARAM = re.compile(\n    r'(' + _RE_PATTERN_TYPE + r'(?:\\s*(?:\\bconst\\b|[*]))*\\s*'\n    r'&\\s*' + _RE_PATTERN_IDENT + r')\\s*(?:=[^,()]+)?[,)]')\n# A call-by-const-reference parameter either ends with 'const& identifier'\n# or looks like 'const type& identifier' when 'type' is atomic.\n_RE_PATTERN_CONST_REF_PARAM = (\n    r'(?:.*\\s*\\bconst\\s*&\\s*' + _RE_PATTERN_IDENT +\n    r'|const\\s+' + _RE_PATTERN_TYPE + r'\\s*&\\s*' + _RE_PATTERN_IDENT + r')')\n# Stream types.\n_RE_PATTERN_REF_STREAM_PARAM = (",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_RE_PATTERN_CONST_REF_PARAM",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_RE_PATTERN_CONST_REF_PARAM = (\n    r'(?:.*\\s*\\bconst\\s*&\\s*' + _RE_PATTERN_IDENT +\n    r'|const\\s+' + _RE_PATTERN_TYPE + r'\\s*&\\s*' + _RE_PATTERN_IDENT + r')')\n# Stream types.\n_RE_PATTERN_REF_STREAM_PARAM = (\n    r'(?:.*stream\\s*&\\s*' + _RE_PATTERN_IDENT + r')')\ndef CheckLanguage(filename, clean_lines, linenum, file_extension,\n                  include_state, nesting_state, error):\n  \"\"\"Checks rules from the 'C++ language rules' section of cppguide.html.\n  Some of these rules are hard to test (function overloading, using",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_RE_PATTERN_REF_STREAM_PARAM",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_RE_PATTERN_REF_STREAM_PARAM = (\n    r'(?:.*stream\\s*&\\s*' + _RE_PATTERN_IDENT + r')')\ndef CheckLanguage(filename, clean_lines, linenum, file_extension,\n                  include_state, nesting_state, error):\n  \"\"\"Checks rules from the 'C++ language rules' section of cppguide.html.\n  Some of these rules are hard to test (function overloading, using\n  uint32 inappropriately), but we do the best we can.\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_HEADERS_CONTAINING_TEMPLATES",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_HEADERS_CONTAINING_TEMPLATES = (\n    ('<deque>', ('deque',)),\n    ('<functional>', ('unary_function', 'binary_function',\n                      'plus', 'minus', 'multiplies', 'divides', 'modulus',\n                      'negate',\n                      'equal_to', 'not_equal_to', 'greater', 'less',\n                      'greater_equal', 'less_equal',\n                      'logical_and', 'logical_or', 'logical_not',\n                      'unary_negate', 'not1', 'binary_negate', 'not2',\n                      'bind1st', 'bind2nd',",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_HEADERS_MAYBE_TEMPLATES",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_HEADERS_MAYBE_TEMPLATES = (\n    ('<algorithm>', ('copy', 'max', 'min', 'min_element', 'sort',\n                     'transform',\n                    )),\n    ('<utility>', ('forward', 'make_pair', 'move', 'swap')),\n    )\n_RE_PATTERN_STRING = re.compile(r'\\bstring\\b')\n_re_pattern_headers_maybe_templates = []\nfor _header, _templates in _HEADERS_MAYBE_TEMPLATES:\n  for _template in _templates:",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_RE_PATTERN_STRING",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_RE_PATTERN_STRING = re.compile(r'\\bstring\\b')\n_re_pattern_headers_maybe_templates = []\nfor _header, _templates in _HEADERS_MAYBE_TEMPLATES:\n  for _template in _templates:\n    # Match max<type>(..., ...), max(..., ...), but not foo->max, foo.max or\n    # type::max().\n    _re_pattern_headers_maybe_templates.append(\n        (re.compile(r'[^>.]\\b' + _template + r'(<.*?>)?\\([^\\)]'),\n            _template,\n            _header))",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_re_pattern_headers_maybe_templates",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_re_pattern_headers_maybe_templates = []\nfor _header, _templates in _HEADERS_MAYBE_TEMPLATES:\n  for _template in _templates:\n    # Match max<type>(..., ...), max(..., ...), but not foo->max, foo.max or\n    # type::max().\n    _re_pattern_headers_maybe_templates.append(\n        (re.compile(r'[^>.]\\b' + _template + r'(<.*?>)?\\([^\\)]'),\n            _template,\n            _header))\n# Other scripts may reach in and modify this pattern.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_re_pattern_templates",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_re_pattern_templates = []\nfor _header, _templates in _HEADERS_CONTAINING_TEMPLATES:\n  for _template in _templates:\n    _re_pattern_templates.append(\n        (re.compile(r'(\\<|\\b)' + _template + r'\\s*\\<'),\n         _template + '<>',\n         _header))\ndef FilesBelongToSameModule(filename_cc, filename_h):\n  \"\"\"Check if these two filenames belong to the same module.\n  The concept of a 'module' here is a as follows:",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "_RE_PATTERN_EXPLICIT_MAKEPAIR",
        "kind": 5,
        "importPath": "libraries.SdFat-2.2.0.extras.cpplint",
        "description": "libraries.SdFat-2.2.0.extras.cpplint",
        "peekOfCode": "_RE_PATTERN_EXPLICIT_MAKEPAIR = re.compile(r'\\bmake_pair\\s*<')\ndef CheckMakePairUsesDeduction(filename, clean_lines, linenum, error):\n  \"\"\"Check that make_pair's template arguments are deduced.\n  G++ 4.6 in C++11 mode fails badly if make_pair's template arguments are\n  specified explicitly, and such use isn't intended in any case.\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.",
        "detail": "libraries.SdFat-2.2.0.extras.cpplint",
        "documentation": {}
    },
    {
        "label": "debugOut",
        "kind": 2,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "def debugOut(s):\n    if debug:\n        print(s)\n# look at arguments\nparser = argparse.ArgumentParser(description=\"Convert bmp file to C array\")\nparser.add_argument(\"-v\", \"--verbose\", help=\"debug output\", action=\"store_true\")\nparser.add_argument(\"input\", help=\"input file name\")\nparser.add_argument(\"-o\", \"--output\", help=\"output file name\")\nargs = parser.parse_args()\nif not os.path.exists(args.input):",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "debug",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "debug = None\ndef debugOut(s):\n    if debug:\n        print(s)\n# look at arguments\nparser = argparse.ArgumentParser(description=\"Convert bmp file to C array\")\nparser.add_argument(\"-v\", \"--verbose\", help=\"debug output\", action=\"store_true\")\nparser.add_argument(\"input\", help=\"input file name\")\nparser.add_argument(\"-o\", \"--output\", help=\"output file name\")\nargs = parser.parse_args()",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "parser = argparse.ArgumentParser(description=\"Convert bmp file to C array\")\nparser.add_argument(\"-v\", \"--verbose\", help=\"debug output\", action=\"store_true\")\nparser.add_argument(\"input\", help=\"input file name\")\nparser.add_argument(\"-o\", \"--output\", help=\"output file name\")\nargs = parser.parse_args()\nif not os.path.exists(args.input):\n    parser.print_help()\n    print(\"The input file {} does not exist\".format(args.input))\n    sys.exit(1)\nif args.output == None:",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "args = parser.parse_args()\nif not os.path.exists(args.input):\n    parser.print_help()\n    print(\"The input file {} does not exist\".format(args.input))\n    sys.exit(1)\nif args.output == None:\n    output = os.path.basename(args.input).replace(\".bmp\", \".c\")\nelse:\n    output = args.output\ndebug = args.verbose",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "debug",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "debug = args.verbose\ntry:\n    #Open our input file which is defined by the first commandline argument\n    #then dump it into a list of bytes\n    infile = open(args.input,\"rb\") #b is for binary\n    contents = bytearray(infile.read())\n    infile.close()\nexcept:\n    print(\"could not read input file {}\".format(args.input))\n    sys.exit(1)",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "upto",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "upto = 2\n#Get the size of this image\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nfileSize = struct.unpack(\"I\", bytearray(data))\nupto += 4\n# four bytes are reserved\nupto += 4\ndebugOut(\"Size of file: {}\".format(fileSize[0]))\n#Get the header offset amount\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "data = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nfileSize = struct.unpack(\"I\", bytearray(data))\nupto += 4\n# four bytes are reserved\nupto += 4\ndebugOut(\"Size of file: {}\".format(fileSize[0]))\n#Get the header offset amount\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\noffset = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"Offset: {}\".format(offset[0]))",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "fileSize",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "fileSize = struct.unpack(\"I\", bytearray(data))\nupto += 4\n# four bytes are reserved\nupto += 4\ndebugOut(\"Size of file: {}\".format(fileSize[0]))\n#Get the header offset amount\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\noffset = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"Offset: {}\".format(offset[0]))\nupto += 4",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "data = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\noffset = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"Offset: {}\".format(offset[0]))\nupto += 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nheadersize = struct.unpack(\"I\", bytearray(data))\nheaderLength = headersize[0]\nstartOfDefinitions = headerLength + upto\ndebugOut(\"header size: {}, up to {}, startOfDefinitions {}\".format(headersize[0], upto, startOfDefinitions))\nupto += 4",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "offset",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "offset = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"Offset: {}\".format(offset[0]))\nupto += 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nheadersize = struct.unpack(\"I\", bytearray(data))\nheaderLength = headersize[0]\nstartOfDefinitions = headerLength + upto\ndebugOut(\"header size: {}, up to {}, startOfDefinitions {}\".format(headersize[0], upto, startOfDefinitions))\nupto += 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "data = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nheadersize = struct.unpack(\"I\", bytearray(data))\nheaderLength = headersize[0]\nstartOfDefinitions = headerLength + upto\ndebugOut(\"header size: {}, up to {}, startOfDefinitions {}\".format(headersize[0], upto, startOfDefinitions))\nupto += 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"width: {}\".format(t[0]))\nwidth = t[0]",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "headersize",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "headersize = struct.unpack(\"I\", bytearray(data))\nheaderLength = headersize[0]\nstartOfDefinitions = headerLength + upto\ndebugOut(\"header size: {}, up to {}, startOfDefinitions {}\".format(headersize[0], upto, startOfDefinitions))\nupto += 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"width: {}\".format(t[0]))\nwidth = t[0]\nupto += 4",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "headerLength",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "headerLength = headersize[0]\nstartOfDefinitions = headerLength + upto\ndebugOut(\"header size: {}, up to {}, startOfDefinitions {}\".format(headersize[0], upto, startOfDefinitions))\nupto += 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"width: {}\".format(t[0]))\nwidth = t[0]\nupto += 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "startOfDefinitions",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "startOfDefinitions = headerLength + upto\ndebugOut(\"header size: {}, up to {}, startOfDefinitions {}\".format(headersize[0], upto, startOfDefinitions))\nupto += 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"width: {}\".format(t[0]))\nwidth = t[0]\nupto += 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "data = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"width: {}\".format(t[0]))\nwidth = t[0]\nupto += 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"height: {}\".format(t[0]))\nheight = t[0]\n# 26",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "t = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"width: {}\".format(t[0]))\nwidth = t[0]\nupto += 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"height: {}\".format(t[0]))\nheight = t[0]\n# 26\nupto += 4",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "width",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "width = t[0]\nupto += 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"height: {}\".format(t[0]))\nheight = t[0]\n# 26\nupto += 4\ndata = struct.pack(\"BB\", contents[upto], contents[upto+1])\nt = struct.unpack(\"H\", bytearray(data))",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "data = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"height: {}\".format(t[0]))\nheight = t[0]\n# 26\nupto += 4\ndata = struct.pack(\"BB\", contents[upto], contents[upto+1])\nt = struct.unpack(\"H\", bytearray(data))\ndebugOut(\"planes: {}\".format(t[0]))\nupto = upto + 2",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "t = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"height: {}\".format(t[0]))\nheight = t[0]\n# 26\nupto += 4\ndata = struct.pack(\"BB\", contents[upto], contents[upto+1])\nt = struct.unpack(\"H\", bytearray(data))\ndebugOut(\"planes: {}\".format(t[0]))\nupto = upto + 2\ndata = struct.pack(\"BB\", contents[upto], contents[upto+1])",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "height = t[0]\n# 26\nupto += 4\ndata = struct.pack(\"BB\", contents[upto], contents[upto+1])\nt = struct.unpack(\"H\", bytearray(data))\ndebugOut(\"planes: {}\".format(t[0]))\nupto = upto + 2\ndata = struct.pack(\"BB\", contents[upto], contents[upto+1])\nt = struct.unpack(\"H\", bytearray(data))\ndebugOut(\"bits per pixel: {}\".format(t[0]))",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "data = struct.pack(\"BB\", contents[upto], contents[upto+1])\nt = struct.unpack(\"H\", bytearray(data))\ndebugOut(\"planes: {}\".format(t[0]))\nupto = upto + 2\ndata = struct.pack(\"BB\", contents[upto], contents[upto+1])\nt = struct.unpack(\"H\", bytearray(data))\ndebugOut(\"bits per pixel: {}\".format(t[0]))\nbitsPerPixel = t[0]\nupto = upto + 2\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "t = struct.unpack(\"H\", bytearray(data))\ndebugOut(\"planes: {}\".format(t[0]))\nupto = upto + 2\ndata = struct.pack(\"BB\", contents[upto], contents[upto+1])\nt = struct.unpack(\"H\", bytearray(data))\ndebugOut(\"bits per pixel: {}\".format(t[0]))\nbitsPerPixel = t[0]\nupto = upto + 2\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "upto",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "upto = upto + 2\ndata = struct.pack(\"BB\", contents[upto], contents[upto+1])\nt = struct.unpack(\"H\", bytearray(data))\ndebugOut(\"bits per pixel: {}\".format(t[0]))\nbitsPerPixel = t[0]\nupto = upto + 2\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biCompression: {}\".format(t[0]))\nupto = upto + 4",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "data = struct.pack(\"BB\", contents[upto], contents[upto+1])\nt = struct.unpack(\"H\", bytearray(data))\ndebugOut(\"bits per pixel: {}\".format(t[0]))\nbitsPerPixel = t[0]\nupto = upto + 2\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biCompression: {}\".format(t[0]))\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "t = struct.unpack(\"H\", bytearray(data))\ndebugOut(\"bits per pixel: {}\".format(t[0]))\nbitsPerPixel = t[0]\nupto = upto + 2\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biCompression: {}\".format(t[0]))\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "bitsPerPixel",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "bitsPerPixel = t[0]\nupto = upto + 2\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biCompression: {}\".format(t[0]))\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biSizeImage: {}\".format(t[0]))\nupto = upto + 4",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "upto",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "upto = upto + 2\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biCompression: {}\".format(t[0]))\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biSizeImage: {}\".format(t[0]))\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "data = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biCompression: {}\".format(t[0]))\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biSizeImage: {}\".format(t[0]))\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "t = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biCompression: {}\".format(t[0]))\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biSizeImage: {}\".format(t[0]))\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biXPelsPerMeter: {}\".format(t[0]))",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "upto",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "upto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biSizeImage: {}\".format(t[0]))\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biXPelsPerMeter: {}\".format(t[0]))\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "data = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biSizeImage: {}\".format(t[0]))\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biXPelsPerMeter: {}\".format(t[0]))\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "t = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biSizeImage: {}\".format(t[0]))\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biXPelsPerMeter: {}\".format(t[0]))\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biYPelsPerMeter: {}\".format(t[0]))",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "upto",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "upto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biXPelsPerMeter: {}\".format(t[0]))\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biYPelsPerMeter: {}\".format(t[0]))\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "data = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biXPelsPerMeter: {}\".format(t[0]))\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biYPelsPerMeter: {}\".format(t[0]))\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "t = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biXPelsPerMeter: {}\".format(t[0]))\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biYPelsPerMeter: {}\".format(t[0]))\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biClrUsed: {}\".format(t[0]))",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "upto",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "upto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biYPelsPerMeter: {}\".format(t[0]))\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biClrUsed: {}\".format(t[0]))\ncolorsUsed = t\nupto = upto + 4",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "data = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biYPelsPerMeter: {}\".format(t[0]))\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biClrUsed: {}\".format(t[0]))\ncolorsUsed = t\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "t = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biYPelsPerMeter: {}\".format(t[0]))\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biClrUsed: {}\".format(t[0]))\ncolorsUsed = t\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "upto",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "upto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biClrUsed: {}\".format(t[0]))\ncolorsUsed = t\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biClrImportant: {}\".format(t[0]))\nupto += 4",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "data = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biClrUsed: {}\".format(t[0]))\ncolorsUsed = t\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biClrImportant: {}\".format(t[0]))\nupto += 4\ndebugOut(\"Upto: {} Number of colors used: {} definitions start at: {}\".format(upto, colorsUsed[0],  startOfDefinitions))",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "t = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biClrUsed: {}\".format(t[0]))\ncolorsUsed = t\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biClrImportant: {}\".format(t[0]))\nupto += 4\ndebugOut(\"Upto: {} Number of colors used: {} definitions start at: {}\".format(upto, colorsUsed[0],  startOfDefinitions))\n#Create color definition array and init the array of color values",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "colorsUsed",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "colorsUsed = t\nupto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biClrImportant: {}\".format(t[0]))\nupto += 4\ndebugOut(\"Upto: {} Number of colors used: {} definitions start at: {}\".format(upto, colorsUsed[0],  startOfDefinitions))\n#Create color definition array and init the array of color values\ncolorIndex = [] #(colorsUsed[0])\nfor i in range(colorsUsed[0]):",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "upto",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "upto = upto + 4\ndata = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biClrImportant: {}\".format(t[0]))\nupto += 4\ndebugOut(\"Upto: {} Number of colors used: {} definitions start at: {}\".format(upto, colorsUsed[0],  startOfDefinitions))\n#Create color definition array and init the array of color values\ncolorIndex = [] #(colorsUsed[0])\nfor i in range(colorsUsed[0]):\n    colorIndex.append(0)",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "data = struct.pack(\"BBBB\", contents[upto], contents[upto+1], contents[upto+2], contents[upto+3])\nt = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biClrImportant: {}\".format(t[0]))\nupto += 4\ndebugOut(\"Upto: {} Number of colors used: {} definitions start at: {}\".format(upto, colorsUsed[0],  startOfDefinitions))\n#Create color definition array and init the array of color values\ncolorIndex = [] #(colorsUsed[0])\nfor i in range(colorsUsed[0]):\n    colorIndex.append(0)\n#Assign the colors to the array.  upto = 54",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "t = struct.unpack(\"I\", bytearray(data))\ndebugOut(\"biClrImportant: {}\".format(t[0]))\nupto += 4\ndebugOut(\"Upto: {} Number of colors used: {} definitions start at: {}\".format(upto, colorsUsed[0],  startOfDefinitions))\n#Create color definition array and init the array of color values\ncolorIndex = [] #(colorsUsed[0])\nfor i in range(colorsUsed[0]):\n    colorIndex.append(0)\n#Assign the colors to the array.  upto = 54\n# startOfDefinitions = upto",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "colorIndex",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "colorIndex = [] #(colorsUsed[0])\nfor i in range(colorsUsed[0]):\n    colorIndex.append(0)\n#Assign the colors to the array.  upto = 54\n# startOfDefinitions = upto\nfor i in range(colorsUsed[0]):\n    upto =  startOfDefinitions + (i * 4)\n    blue = contents[upto]\n    green = contents[upto + 1]\n    red = contents[upto + 2]",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "arraySize",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "arraySize = (len(contents) - offset[0]) \noutputString = \"/* This was generated using a script based on the SparkFun BMPtoArray python script\" + '\\n'\noutputString += \" See https://github.com/sparkfun/BMPtoArray for more info */\" + '\\n\\n'\noutputString += \"static const uint16_t palette[\" + str(colorsUsed[0]) + \"] = {\";\nfor i in range(colorsUsed[0]): \n    # print hexlify(colorIndex[i])\n    if i % 4 == 0:\n        outputString += \"\\n\\t\"\n    outputString += \"0x{:04x}, \".format(colorIndex[i])\noutputString = outputString[:-2]",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "outputString",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "outputString = \"/* This was generated using a script based on the SparkFun BMPtoArray python script\" + '\\n'\noutputString += \" See https://github.com/sparkfun/BMPtoArray for more info */\" + '\\n\\n'\noutputString += \"static const uint16_t palette[\" + str(colorsUsed[0]) + \"] = {\";\nfor i in range(colorsUsed[0]): \n    # print hexlify(colorIndex[i])\n    if i % 4 == 0:\n        outputString += \"\\n\\t\"\n    outputString += \"0x{:04x}, \".format(colorIndex[i])\noutputString = outputString[:-2]\noutputString += \"\\n};\\n\\n\"",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "outputString",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "outputString = outputString[:-2]\noutputString += \"\\n};\\n\\n\"\noutputString += \"// width is \" + str(width) + \", height is \" + str(height) + \"\\n\"\noutputString += \"static const uint8_t myGraphic[\" + str(arraySize) + \"] PROGMEM = {\" + '\\n'\nif bitsPerPixel != 4:\n    print(\"Expected 4 bits per pixel; found {}\".format(bitsPerPixel))\n    sys.exit(1)\n#Start converting spots to values\n#Start at the offset and go to the end of the file\ndropLastNumber = True #(width % 4) == 2 or (width % 4) == 1",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "dropLastNumber",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "dropLastNumber = True #(width % 4) == 2 or (width % 4) == 1\npaddedWidth = int(math.ceil(bitsPerPixel * width / 32.0) * 4)\ndebugOut(\"array range is {} {} len(contents) is {} paddedWidth is {} width is {}\".format(offset[0], fileSize[0], len(contents), paddedWidth, width))\nr = 0\nwidth = int(width / 2)\n#for i in range(offset[0], fileSize[0]):                 # close but image is upside down.  Each row is correct but need to swap columns.\n#for i in range(fileSize[0], offset[0], -1):\nfor col in range(height-1, -1, -1):\n    i = 0\n    for row in range(width):",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "paddedWidth",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "paddedWidth = int(math.ceil(bitsPerPixel * width / 32.0) * 4)\ndebugOut(\"array range is {} {} len(contents) is {} paddedWidth is {} width is {}\".format(offset[0], fileSize[0], len(contents), paddedWidth, width))\nr = 0\nwidth = int(width / 2)\n#for i in range(offset[0], fileSize[0]):                 # close but image is upside down.  Each row is correct but need to swap columns.\n#for i in range(fileSize[0], offset[0], -1):\nfor col in range(height-1, -1, -1):\n    i = 0\n    for row in range(width):\n        colorCode1 = contents[row + col*paddedWidth + offset[0]]  ",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "r = 0\nwidth = int(width / 2)\n#for i in range(offset[0], fileSize[0]):                 # close but image is upside down.  Each row is correct but need to swap columns.\n#for i in range(fileSize[0], offset[0], -1):\nfor col in range(height-1, -1, -1):\n    i = 0\n    for row in range(width):\n        colorCode1 = contents[row + col*paddedWidth + offset[0]]  \n        if r > 0 and r % width == 0:\n            i = 0",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "width",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "width = int(width / 2)\n#for i in range(offset[0], fileSize[0]):                 # close but image is upside down.  Each row is correct but need to swap columns.\n#for i in range(fileSize[0], offset[0], -1):\nfor col in range(height-1, -1, -1):\n    i = 0\n    for row in range(width):\n        colorCode1 = contents[row + col*paddedWidth + offset[0]]  \n        if r > 0 and r % width == 0:\n            i = 0\n            outputString += '\\n\\n'",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    },
    {
        "label": "outputString",
        "kind": 5,
        "importPath": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "description": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "peekOfCode": "outputString = outputString[:-2]\noutputString += \"};\"\ntry:\n    #Write the output string to our output file\n    outfile = open(output, \"w\")\n    outfile.write(outputString)\n    outfile.close()\nexcept:\n    print(\"could not write output to file {}\".format(output))\n    sys.exit(1)",
        "detail": "libraries.TFT_eSPI-master.Tools.bmp2array4bit.bmp2array4bit",
        "documentation": {}
    }
]